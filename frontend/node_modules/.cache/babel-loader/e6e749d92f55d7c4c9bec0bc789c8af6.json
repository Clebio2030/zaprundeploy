{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import{makeStyles}from\"@material-ui/core/styles\";import{IconButton,Typography,LinearProgress,Box,Snackbar}from\"@material-ui/core\";import PlayArrowIcon from\"@material-ui/icons/PlayArrow\";import PauseIcon from\"@material-ui/icons/Pause\";import AudiotrackIcon from\"@material-ui/icons/Audiotrack\";import{Howl,Howler}from'howler';const useStyles=makeStyles(theme=>({audioContainer:{display:\"flex\",flexDirection:\"column\",width:\"100%\",maxWidth:250,backgroundColor:\"transparent\",borderRadius:8,padding:theme.spacing(0.5),border:\"none\",overflow:\"hidden\"},playerControls:{display:\"flex\",alignItems:\"center\",backgroundColor:theme.palette.type===\"dark\"?\"rgba(60, 60, 60, 0.7)\":\"rgba(255, 255, 255, 0.7)\",borderRadius:24,padding:theme.spacing(0.5),boxShadow:\"0px 1px 3px rgba(0, 0, 0, 0.08)\"},playButton:{padding:6,color:theme.palette.primary.main},progressContainer:{display:\"flex\",flexDirection:\"column\",flex:1,marginLeft:theme.spacing(1),marginRight:theme.spacing(1)},progressBar:{height:4,borderRadius:2,marginBottom:4,backgroundColor:\"rgba(0, 0, 0, 0.1)\",\"& .MuiLinearProgress-bar\":{backgroundColor:theme.palette.primary.main}},timeInfo:{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\"},timeText:{fontSize:10,color:theme.palette.text.secondary,fontWeight:500},audioIcon:{fontSize:20,color:theme.palette.primary.main,marginRight:theme.spacing(1)}}));const formatTime=seconds=>{// Verificar se o valor é válido\nif(seconds===undefined||seconds===null||!isFinite(seconds)||isNaN(seconds)){return\"00:00\";}// Garantir que seja um número positivo\nconst safeSeconds=Math.max(0,Number(seconds));const mins=Math.floor(safeSeconds/60);const secs=Math.floor(safeSeconds%60);return\"\".concat(mins.toString().padStart(2,\"0\"),\":\").concat(secs.toString().padStart(2,\"0\"));};const getFullUrl=url=>{if(!url)return\"\";// Se a URL já começa com http ou https, retornar como está\nif(url.startsWith('http://')||url.startsWith('https://')){return url;}// Se a URL é relativa, adicionar o endereço do backend\nconst BACKEND_URL=process.env.REACT_APP_BACKEND_URL||window.location.origin;// Se começa com '/', removemos a barra para evitar duplicação\nconst cleanUrl=url.startsWith('/')?url.substring(1):url;// Verificar se já contém o prefixo public/ antes de adicioná-lo\nconst urlWithPublic=cleanUrl.startsWith('public/')?cleanUrl:\"public/\".concat(cleanUrl);const fullUrl=\"\".concat(BACKEND_URL,\"/\").concat(urlWithPublic);console.log('[DEBUG AUDIO URL]',{original:url,final:fullUrl});return fullUrl;};// Função para detectar iOS\nconst isIOS=()=>{const userAgent=navigator.userAgent||navigator.vendor||window.opera;return /iPad|iPhone|iPod/.test(userAgent)||navigator.platform==='MacIntel'&&navigator.maxTouchPoints>1;};// Função para obter a versão do iOS\nconst getIOSVersion=()=>{if(!isIOS())return 0;const match=navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);if(match){return parseFloat(\"\".concat(match[1],\".\").concat(match[2]));}return 0;};// Armazenar audio contexts para evitar problemas de múltiplos contexts\nconst audioContexts=[];// Armazenar áudio helper para desbloquear interativamente\nlet silentAudioElement=null;// Desbloquear áudio no iOS - método extremamente agressivo\nconst forceUnlockAudio=()=>{if(!isIOS())return Promise.resolve(true);return new Promise(resolve=>{try{// Limpeza prévia\nif(audioContexts.length>3){const oldContext=audioContexts.shift();if(oldContext&&oldContext.close){try{oldContext.close();}catch(e){console.error('Erro ao fechar context antigo:',e);}}}// 1. WebAudio API - método mais confiável\nconst AudioContext=window.AudioContext||window.webkitAudioContext;const audioContext=new AudioContext();audioContexts.push(audioContext);// Criar oscilador e conectar\nconst oscillator=audioContext.createOscillator();const gainNode=audioContext.createGain();gainNode.gain.value=0.1;// Volume mais alto para garantir que desbloqueie\noscillator.connect(gainNode);gainNode.connect(audioContext.destination);// Iniciar e parar um pouco depois (não imediatamente)\noscillator.start(0);setTimeout(()=>{oscillator.stop();// Forçar a retomada do contexto de áudio\nif(audioContext.state==='suspended'){audioContext.resume().then(()=>{console.log('[INFO] AudioContext retomado com sucesso');}).catch(e=>{console.error('[ERROR] Falha ao retomar AudioContext:',e);});}},50);// 2. Reproduzir um arquivo de audio vazio com interação do usuário\nif(!silentAudioElement){silentAudioElement=new Audio('data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABIADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV6urq6urq6urq6urq6urq6urq6urq6urq6v////////////////////////////////8AAAAATGF2YzU4LjU0AAAAAAAAAAAAAAAAJAAAAAAAAAAAASAn4Wq1AAAAAAAAAAAAAAAAAAAAAP/7UMQAAAesTXWUEQBBiS7pyQiCI4OmIQgZBBDKCGMQcRwQQQQQQQQQQQQQQQQQQgQIECBBBBBAQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAiD/+1LEGIAEcAGPoIAAiO2YL/QQAARAgQIECBAgQIECBAgQIECBAgQ');silentAudioElement.preload='auto';silentAudioElement.loop=false;// Importante: manter referência para uso futuro\ndocument.body.appendChild(silentAudioElement);}// Sempre tocar o áudio silencioso em uma interação\nif(silentAudioElement){silentAudioElement.currentTime=0;silentAudioElement.volume=0.5;const silentPlayPromise=silentAudioElement.play();if(silentPlayPromise){silentPlayPromise.catch(()=>{console.log('[INFO] Não foi possível reproduzir áudio silencioso');});}}// 3. Forçar Howler a desbloquear\nif(Howler){Howler.autoUnlock=true;Howler.html5PoolSize=30;// Pool maior para mais consistência \nHowler.usingWebAudio=true;if(typeof Howler._unlockAudio==='function'){Howler._unlockAudio();}}// 4. Simulando interação do usuário\nconst eventTypes=['touchstart','touchend','mousedown','mouseup','click'];eventTypes.forEach(eventType=>{const event=document.createEvent('Event');event.initEvent(eventType,true,true);document.body.dispatchEvent(event);});// 5. Criação de sons temporários pelo Howler\ntry{const tempSound=new Howl({src:['data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABIADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV6urq6urq6urq6urq6urq6urq6urq6urq6v////////////////////////////////8AAAAATGF2YzU4LjU0AAAAAAAAAAAAAAAAJAAAAAAAAAAAASAn4Wq1AAAAAAAAAAAAAAAAAAAAAP/7UMQAAAesTXWUEQBBiS7pyQiCI4OmIQgZBBDKCGMQcRwQQQQQQQQQQQQQQQQQQgQIECBBBBBAQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAiD/+1LEGIAEcAGPoIAAiO2YL/QQAARAgQIECBAgQIECBAgQIECBAgQ'],volume:0.1,html5:true,onend:function(){this.unload();},onloaderror:function(){this.unload();}});tempSound.play();setTimeout(()=>{tempSound.unload();},100);}catch(e){console.log('[INFO] Erro ao criar som temporário:',e);}// Resolver a Promise depois de tentar todas as estratégias\nsetTimeout(()=>{resolve(true);},150);}catch(e){console.error('[ERROR] Erro ao desbloquear áudio forçadamente:',e);resolve(false);}});};// Pré-cache de URLs de áudio para evitar problemas de carregamento\nconst audioCache={};// Método para pré-carregar áudio no cache\nconst preloadAudio=url=>{if(!url||audioCache[url])return Promise.resolve(url);return new Promise((resolve,reject)=>{try{const xhr=new XMLHttpRequest();xhr.open('GET',url,true);xhr.responseType='blob';xhr.onload=function(){if(this.status>=200&&this.status<300){const blob=this.response;const objectURL=URL.createObjectURL(blob);audioCache[url]=objectURL;resolve(objectURL);}else{reject(new Error(\"Falha ao carregar \\xE1udio: \".concat(this.status)));}};xhr.onerror=function(){reject(new Error('Erro de rede ao carregar áudio'));};xhr.send();}catch(e){console.error('[ERROR] Erro ao pré-carregar áudio:',e);reject(e);}});};// Método para criar e gerenciar manualmente a reprodução em ambiente iOS\nconst createIOSAudioPlayer=(url,_ref)=>{let{onPlay,onPause,onEnd,onTimeUpdate,onLoad,onError}=_ref;try{// Array para armazenar múltiplos elementos de áudio para fallback\nconst audioElements=[];let currentAudioIndex=0;let retryCount=0;let isUnlocked=false;// Função para criar um novo elemento de áudio\nconst createAudioElement=()=>{const audio=new Audio();audio.autoplay=false;audio.preload='auto';audio.crossOrigin='anonymous';audio.volume=1.0;// Eventos para todos os elementos\naudio.addEventListener('canplaythrough',()=>{if(onLoad)onLoad(audio.duration);});audio.addEventListener('loadedmetadata',()=>{if(onLoad)onLoad(audio.duration);});audio.addEventListener('error',e=>{console.error('Erro no elemento de áudio:',e);});audio.addEventListener('ended',()=>{if(onEnd)onEnd();});audio.addEventListener('timeupdate',()=>{if(onTimeUpdate)onTimeUpdate(audio.currentTime);});return audio;};// Criar múltiplos elementos de áudio para redundância\nfor(let i=0;i<3;i++){audioElements.push(createAudioElement());}// Pré-carregar o áudio e configurar a URL\npreloadAudio(url).then(cachedUrl=>{audioElements.forEach(audio=>{audio.src=cachedUrl;audio.load();});}).catch(error=>{console.warn('[WARN] Erro ao pre-carregar, usando URL direta:',error);audioElements.forEach(audio=>{audio.src=url;audio.load();});});// Desbloquear áudio e configurar flag\nforceUnlockAudio().then(success=>{isUnlocked=success;});// Funções para controlar o áudio\nconst play=()=>{return new Promise((resolve,reject)=>{// Se já desistimos devido a muitas tentativas, reset\nif(retryCount>=10){retryCount=0;}// Tentar desbloquear o áudio antes de reproduzir, apenas se ainda não desbloqueado\nif(!isUnlocked){forceUnlockAudio().then(success=>{isUnlocked=success;attemptPlay();});}else{attemptPlay();}function attemptPlay(){// Selecionar o elemento atual para reprodução\nconst currentAudio=audioElements[currentAudioIndex];// Se chegamos aqui após várias tentativas, criar um elemento fresco\nif(retryCount>3){const newAudio=createAudioElement();newAudio.src=url;newAudio.load();audioElements.push(newAudio);currentAudioIndex=audioElements.length-1;currentAudio=audioElements[currentAudioIndex];}console.log(\"[DEBUG] Tentando reproduzir \\xE1udio (tentativa \".concat(retryCount+1,\")\"));// Tentar reproduzir\nconst playPromise=currentAudio.play();if(playPromise!==undefined){playPromise.then(()=>{console.log('[INFO] Reprodução iniciada com sucesso');if(onPlay)onPlay();retryCount=0;resolve(true);}).catch(error=>{console.error('[ERROR] Falha ao reproduzir:',error);retryCount++;if(retryCount<5){// Trocar para o próximo elemento de áudio\ncurrentAudioIndex=(currentAudioIndex+1)%audioElements.length;// Esperar um pouco e tentar novamente\nsetTimeout(()=>{// Tenta desbloquear novamente antes da nova tentativa\nforceUnlockAudio().then(()=>attemptPlay());},300);}else{if(onError)onError(error);reject(error);}});}else{// Para navegadores antigos\nif(onPlay)onPlay();resolve(true);}}});};const pause=()=>{// Parar todos os elementos para garantir que tudo está parado\naudioElements.forEach(audio=>{try{audio.pause();}catch(e){console.error('Erro ao pausar:',e);}});if(onPause)onPause();};const stop=()=>{audioElements.forEach(audio=>{try{audio.pause();audio.currentTime=0;}catch(e){console.error('Erro ao parar:',e);}});if(onPause)onPause();};const seek=time=>{// Aplicar para todos os elementos\naudioElements.forEach(audio=>{try{audio.currentTime=time;}catch(e){console.error('Erro ao seek:',e);}});};const setVolume=volume=>{// Aplicar para todos os elementos\naudioElements.forEach(audio=>{try{audio.volume=volume;}catch(e){console.error('Erro ao definir volume:',e);}});};const getCurrentTime=()=>{const currentAudio=audioElements[currentAudioIndex];return currentAudio.currentTime||0;};const getDuration=()=>{const currentAudio=audioElements[currentAudioIndex];return currentAudio.duration||0;};const isPlaying=()=>{const currentAudio=audioElements[currentAudioIndex];return!currentAudio.paused;};const cleanup=()=>{audioElements.forEach(audio=>{try{audio.pause();audio.src='';audio.load();}catch(e){console.error('Erro ao limpar:',e);}});// Limpar URL do cache se existir\nif(audioCache[url]){try{URL.revokeObjectURL(audioCache[url]);delete audioCache[url];}catch(e){console.error('Erro ao limpar cache URL:',e);}}};return{play,pause,stop,seek,setVolume,getCurrentTime,getDuration,isPlaying,cleanup};}catch(e){console.error('Erro ao criar player iOS:',e);return null;}};export default function ChatAudioPlayer(_ref2){let{audioUrl,duration,isRight}=_ref2;const classes=useStyles();const[isPlaying,setIsPlaying]=useState(false);const[currentTime,setCurrentTime]=useState(0);const[audioDuration,setAudioDuration]=useState(duration||0);const[metadataLoaded,setMetadataLoaded]=useState(false);const[loadingFailed,setLoadingFailed]=useState(false);const[showTryAgain,setShowTryAgain]=useState(false);const[errorMessage,setErrorMessage]=useState('Tente novamente ou verifique o modo silencioso');const soundRef=useRef(null);const iosPlayerRef=useRef(null);const progressInterval=useRef(null);const loadAttempts=useRef(0);const retryTimeoutRef=useRef(null);// Função para criar uma notificação para o usuário tentar novamente\nconst showTryAgainMessage=message=>{setErrorMessage(message||'Tente novamente ou verifique o modo silencioso');setShowTryAgain(true);// Auto-hide após alguns segundos\nif(retryTimeoutRef.current){clearTimeout(retryTimeoutRef.current);}retryTimeoutRef.current=setTimeout(()=>{setShowTryAgain(false);},3000);};// Validar duração para garantir valor numérico válido\nconst validateDuration=value=>{// Verificar se o valor é numérico e finito\nif(value===undefined||value===null||!isFinite(value)||isNaN(value)||value<=0){return 0;}return parseFloat(value);};// Desbloquear áudio ao montar o componente e sempre que visível\nuseEffect(()=>{// Tentar desbloquear o áudio logo ao carregar o componente\nif(isIOS()){console.log('[INFO] Inicializando o módulo de áudio para iOS');forceUnlockAudio();// Adicionar ouvintes para eventos de visibilidade\ndocument.addEventListener('visibilitychange',handleVisibilityChange);window.addEventListener('focus',handleVisibilityChange);// Configurações globais do Howler para iOS\nHowler.mobileAutoEnable=true;Howler.html5PoolSize=30;}function handleVisibilityChange(){if(document.visibilityState==='visible'||document.hasFocus()){console.log('[INFO] Documento visível/focado, desbloqueando áudio');forceUnlockAudio();}}return()=>{// Limpeza ao desmontar\nif(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}if(retryTimeoutRef.current){clearTimeout(retryTimeoutRef.current);retryTimeoutRef.current=null;}if(soundRef.current){soundRef.current.unload();soundRef.current=null;}if(iosPlayerRef.current){iosPlayerRef.current.cleanup();iosPlayerRef.current=null;}// Remover listeners\ndocument.removeEventListener('visibilitychange',handleVisibilityChange);window.removeEventListener('focus',handleVisibilityChange);};},[]);// Sempre que a duração for definida diretamente via prop, considerar os metadados como carregados\nuseEffect(()=>{const validDuration=validateDuration(duration);if(validDuration>0){console.log(\"[DEBUG] Prop de dura\\xE7\\xE3o v\\xE1lida recebida: \".concat(validDuration,\"s\"));setAudioDuration(validDuration);setMetadataLoaded(true);}else if(audioDuration>0){// Se já temos uma duração válida no estado, considerar os metadados como carregados\nsetMetadataLoaded(true);}},[duration,audioDuration]);// Configurar o player de áudio quando a URL de áudio mudar\nuseEffect(()=>{// Reset de estados\nsetIsPlaying(false);setCurrentTime(0);setLoadingFailed(false);// Limpar recursos anteriores\nif(soundRef.current){soundRef.current.unload();soundRef.current=null;}if(iosPlayerRef.current){iosPlayerRef.current.cleanup();iosPlayerRef.current=null;}if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}if(!audioUrl){setMetadataLoaded(true);return;}const fullUrl=getFullUrl(audioUrl);console.log('[DEBUG] Inicializando player de áudio com URL:',fullUrl);// Tratamento especial para iOS\nif(isIOS()){console.log('[INFO] Usando player especial para iOS');// Desbloquear o áudio do sistema\nforceUnlockAudio();// Criar player nativo para iOS\niosPlayerRef.current=createIOSAudioPlayer(fullUrl,{onLoad:audioDuration=>{console.log('[DEBUG] iOS player carregou áudio com duração:',audioDuration);const validDuration=validateDuration(audioDuration);setAudioDuration(validDuration||30);setMetadataLoaded(true);setLoadingFailed(false);},onPlay:()=>{console.log('[DEBUG] iOS player iniciou reprodução');},onPause:()=>{console.log('[DEBUG] iOS player pausou reprodução');},onEnd:()=>{console.log('[DEBUG] iOS player finalizou reprodução');setIsPlaying(false);setCurrentTime(0);if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}},onTimeUpdate:time=>{setCurrentTime(time);},onError:error=>{console.error('[ERROR] Erro no iOS player:',error);setLoadingFailed(true);setMetadataLoaded(true);showTryAgainMessage('Não foi possível reproduzir. Toque novamente.');}});// Se temos duração prévia, usar para mostrar mesmo que não consiga carregar metadata\nif(duration>0){setAudioDuration(duration);setMetadataLoaded(true);}}else{// Para outros navegadores, usar Howler normalmente\ntry{const howlerConfig={src:[fullUrl],html5:true,preload:true,format:['mp3','mpeg','opus','ogg','oga','wav','aac','caf','m4a','mp4','weba','webm','dolby','flac'],volume:1.0,onload:function(){console.log('[DEBUG] Howler carregado com sucesso. Duração:',this.duration());setMetadataLoaded(true);const validDuration=validateDuration(this.duration());setAudioDuration(validDuration||30);setLoadingFailed(false);},onloaderror:function(id,error){console.error('[ERROR] Erro ao carregar áudio via Howler:',error);loadAttempts.current+=1;if(loadAttempts.current>=3){setLoadingFailed(true);setMetadataLoaded(true);showTryAgainMessage('Erro ao carregar áudio. Tente novamente.');}else{// Tentar novamente com configuração HTML5 alternativa\nsoundRef.current.unload();soundRef.current=new Howl({...howlerConfig,html5:true});}},onplayerror:function(id,error){console.error('[ERROR] Erro ao reproduzir áudio via Howler:',error);setLoadingFailed(true);showTryAgainMessage('Erro ao reproduzir. Tente novamente.');},onend:function(){console.log('[DEBUG] Reprodução finalizada');setIsPlaying(false);setCurrentTime(0);if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}}};soundRef.current=new Howl(howlerConfig);}catch(error){console.error('[ERROR] Exceção ao configurar Howler:',error);setLoadingFailed(true);setMetadataLoaded(true);showTryAgainMessage('Erro ao configurar reprodutor. Tente novamente.');}}},[audioUrl,duration]);const togglePlayback=()=>{// Resetar o estado de erro quando o usuário tenta novamente\nsetLoadingFailed(false);// No iOS, usar o player nativo especial\nif(isIOS()&&iosPlayerRef.current){// Forçar desbloqueio do áudio antes da tentativa de reprodução\nforceUnlockAudio().then(()=>{if(isPlaying){// Se já está tocando, pausar\niosPlayerRef.current.pause();if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}setIsPlaying(false);}else{// Se está pausado, tocar\niosPlayerRef.current.play().then(()=>{// Reprodução iniciada com sucesso\nsetIsPlaying(true);// Atualizar o progresso\nif(!progressInterval.current){progressInterval.current=setInterval(()=>{if(iosPlayerRef.current&&iosPlayerRef.current.isPlaying()){setCurrentTime(iosPlayerRef.current.getCurrentTime());}else{// Se parou de reproduzir por algum motivo, atualizar UI\nif(isPlaying){setIsPlaying(false);if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}}}},100);}}).catch(error=>{console.error('[ERROR] Falha ao reproduzir no iOS:',error);setLoadingFailed(true);setIsPlaying(false);showTryAgainMessage('Não foi possível reproduzir. Tente novamente.');});}});return;}// Para outros navegadores, usar Howler\nif(!soundRef.current)return;if(isPlaying){// Se já está tocando, pausar\nsoundRef.current.pause();if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}setIsPlaying(false);}else{// Se está pausado, tocar\ntry{const playId=soundRef.current.play();// Atualizar o progresso de reprodução em intervalos regulares\nprogressInterval.current=setInterval(()=>{if(soundRef.current&&soundRef.current.playing()){setCurrentTime(soundRef.current.seek());}else{// Se parou de reproduzir por algum motivo, atualizar UI\nif(isPlaying){setIsPlaying(false);if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}}}},100);setIsPlaying(true);}catch(e){console.error('[ERROR] Erro ao iniciar reprodução:',e);setLoadingFailed(true);showTryAgainMessage('Erro ao iniciar reprodução. Tente novamente.');return;// Não continuar se não conseguir reproduzir\n}}};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Box,{className:classes.audioContainer,style:{alignSelf:isRight?\"flex-end\":\"flex-start\"}},/*#__PURE__*/React.createElement(\"div\",{className:classes.playerControls},/*#__PURE__*/React.createElement(IconButton,{className:classes.playButton,onClick:togglePlayback,disabled:loadingFailed&&!isIOS()// No iOS, sempre permitir tentar novamente\n,size:\"small\"},isPlaying?/*#__PURE__*/React.createElement(PauseIcon,{fontSize:\"small\"}):/*#__PURE__*/React.createElement(PlayArrowIcon,{fontSize:\"small\"})),/*#__PURE__*/React.createElement(\"div\",{className:classes.progressContainer},/*#__PURE__*/React.createElement(LinearProgress,{className:classes.progressBar,variant:\"determinate\",value:audioDuration>0?currentTime/audioDuration*100:0}),/*#__PURE__*/React.createElement(\"div\",{className:classes.timeInfo},/*#__PURE__*/React.createElement(Typography,{className:classes.timeText,variant:\"caption\"},formatTime(currentTime)),/*#__PURE__*/React.createElement(Typography,{className:classes.timeText,variant:\"caption\"},loadingFailed?\"?\":!metadataLoaded?\"Carregando...\":formatTime(audioDuration)))))),/*#__PURE__*/React.createElement(Snackbar,{open:showTryAgain,message:errorMessage,autoHideDuration:3000,onClose:()=>setShowTryAgain(false)}));}","map":null,"metadata":{},"sourceType":"module"}