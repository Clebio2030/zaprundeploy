{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import{makeStyles}from\"@material-ui/core/styles\";import{IconButton,Typography,LinearProgress,Box}from\"@material-ui/core\";import PlayArrowIcon from\"@material-ui/icons/PlayArrow\";import PauseIcon from\"@material-ui/icons/Pause\";import AudiotrackIcon from\"@material-ui/icons/Audiotrack\";import{Howl,Howler}from'howler';const useStyles=makeStyles(theme=>({audioContainer:{display:\"flex\",flexDirection:\"column\",width:\"100%\",maxWidth:250,backgroundColor:\"transparent\",borderRadius:8,padding:theme.spacing(0.5),border:\"none\",overflow:\"hidden\"},playerControls:{display:\"flex\",alignItems:\"center\",backgroundColor:theme.palette.type===\"dark\"?\"rgba(60, 60, 60, 0.7)\":\"rgba(255, 255, 255, 0.7)\",borderRadius:24,padding:theme.spacing(0.5),boxShadow:\"0px 1px 3px rgba(0, 0, 0, 0.08)\"},playButton:{padding:6,color:theme.palette.primary.main},progressContainer:{display:\"flex\",flexDirection:\"column\",flex:1,marginLeft:theme.spacing(1),marginRight:theme.spacing(1)},progressBar:{height:4,borderRadius:2,marginBottom:4,backgroundColor:\"rgba(0, 0, 0, 0.1)\",\"& .MuiLinearProgress-bar\":{backgroundColor:theme.palette.primary.main}},timeInfo:{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\"},timeText:{fontSize:10,color:theme.palette.text.secondary,fontWeight:500},audioIcon:{fontSize:20,color:theme.palette.primary.main,marginRight:theme.spacing(1)}}));const formatTime=seconds=>{// Verificar se o valor é válido\nif(seconds===undefined||seconds===null||!isFinite(seconds)||isNaN(seconds)){return\"00:00\";}// Garantir que seja um número positivo\nconst safeSeconds=Math.max(0,Number(seconds));const mins=Math.floor(safeSeconds/60);const secs=Math.floor(safeSeconds%60);return\"\".concat(mins.toString().padStart(2,\"0\"),\":\").concat(secs.toString().padStart(2,\"0\"));};const getFullUrl=url=>{if(!url)return\"\";// Se a URL já começa com http ou https, retornar como está\nif(url.startsWith('http://')||url.startsWith('https://')){return url;}// Se a URL é relativa, adicionar o endereço do backend\nconst BACKEND_URL=process.env.REACT_APP_BACKEND_URL||window.location.origin;// Se começa com '/', removemos a barra para evitar duplicação\nconst cleanUrl=url.startsWith('/')?url.substring(1):url;// Verificar se já contém o prefixo public/ antes de adicioná-lo\nconst urlWithPublic=cleanUrl.startsWith('public/')?cleanUrl:\"public/\".concat(cleanUrl);const fullUrl=\"\".concat(BACKEND_URL,\"/\").concat(urlWithPublic);console.log('[DEBUG AUDIO URL]',{original:url,final:fullUrl});return fullUrl;};// Função para detectar iOS\nconst isIOS=()=>{const userAgent=navigator.userAgent||navigator.vendor||window.opera;return /iPad|iPhone|iPod/.test(userAgent)||navigator.platform==='MacIntel'&&navigator.maxTouchPoints>1;};// Função para obter a versão do iOS\nconst getIOSVersion=()=>{if(!isIOS())return 0;const match=navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);if(match){return parseFloat(\"\".concat(match[1],\".\").concat(match[2]));}return 0;};// Desbloquear áudio no iOS\nconst unlockAudioOnIOS=()=>{if(!isIOS())return;// Criar um oscilador Web Audio para desbloquear o áudio\nlet context;try{const AudioContext=window.AudioContext||window.webkitAudioContext;context=new AudioContext();// Criar oscilador silencioso para desbloquear\nconst oscillator=context.createOscillator();const gain=context.createGain();gain.gain.value=0.001;// Volume extremamente baixo\noscillator.connect(gain);gain.connect(context.destination);oscillator.start(0);oscillator.stop(0.001);// Verificar se está no modo silencioso\nsetTimeout(()=>{if(context.state==='suspended'){context.resume();}},100);}catch(e){console.error('Erro ao desbloquear áudio:',e);}// Forçar desbloqueio via Howler (cinturão e suspensórios)\ntry{Howler._unlockAudio();}catch(e){console.error('Erro ao desbloquear áudio via Howler:',e);}};// Verificar se o dispositivo está em modo silencioso (iOS)\nconst checkSilentMode=()=>{if(!isIOS())return Promise.resolve(false);return new Promise(resolve=>{// Criar um elemento de áudio curto e vazio\nconst audio=new Audio();audio.autoplay=true;// Ouvir evento de play\naudio.onplay=()=>{resolve(false);// Não está em modo silencioso\naudio.remove();};// Se não tocar após um tempo, provavelmente está em modo silencioso\nsetTimeout(()=>{resolve(true);// Provavelmente em modo silencioso\naudio.remove();},300);// Tenta reproduzir um áudio silencioso\naudio.src='data:audio/mp3;base64,/+MYxAAAAANIAAAAAExBTUUzLjk4LjIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA';audio.load();audio.muted=false;audio.volume=0.001;const playPromise=audio.play();if(playPromise){playPromise.catch(()=>{resolve(true);// Provavelmente em modo silencioso\naudio.remove();});}});};export default function ChatAudioPlayer(_ref){let{audioUrl,duration,isRight}=_ref;const classes=useStyles();const[isPlaying,setIsPlaying]=useState(false);const[currentTime,setCurrentTime]=useState(0);const[audioDuration,setAudioDuration]=useState(duration||0);const[metadataLoaded,setMetadataLoaded]=useState(false);const[loadingFailed,setLoadingFailed]=useState(false);const[isSilentMode,setIsSilentMode]=useState(false);const soundRef=useRef(null);const progressInterval=useRef(null);const loadAttempts=useRef(0);// Executar uma vez na montagem para desbloquear áudio\nuseEffect(()=>{// Desbloquear o áudio no iOS ao carregar o componente\nunlockAudioOnIOS();// Verificar se está em modo silencioso\ncheckSilentMode().then(silent=>{setIsSilentMode(silent);if(silent){console.log('[INFO] Dispositivo parece estar em modo silencioso');}});// Definir estratégia WebAudio para o Howler\nif(isIOS()){Howler.mobileAutoEnable=true;// Ajuste para iOS dependendo da versão\nconst iosVersion=getIOSVersion();if(iosVersion>=13){// Usar WebAudio em iOS 13+ quando possível\nHowler.usingWebAudio=true;}}},[]);// Validar duração para garantir valor numérico válido\nconst validateDuration=value=>{// Verificar se o valor é numérico e finito\nif(value===undefined||value===null||!isFinite(value)||isNaN(value)||value<=0){return 0;}return parseFloat(value);};// Sempre que a duração for definida diretamente via prop, considerar os metadados como carregados\nuseEffect(()=>{const validDuration=validateDuration(duration);if(validDuration>0){console.log(\"[DEBUG] Prop de dura\\xE7\\xE3o v\\xE1lida recebida: \".concat(validDuration,\"s\"));setAudioDuration(validDuration);setMetadataLoaded(true);}else if(audioDuration>0){// Se já temos uma duração válida no estado, considerar os metadados como carregados\nsetMetadataLoaded(true);}},[duration,audioDuration]);// Configurar o Howler quando a URL de áudio mudar\nuseEffect(()=>{// Limpar recursos anteriores\nif(soundRef.current){soundRef.current.unload();soundRef.current=null;}if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}if(!audioUrl){setMetadataLoaded(true);return;}const fullUrl=getFullUrl(audioUrl);console.log('[DEBUG] Inicializando Howler com URL:',fullUrl);try{// Configurar opções do Howler para compatibilidade com iOS\nconst iosDevice=isIOS();// No iOS, vamos primeiro tentar com HTML5=true, que é mais compatível\nconst howlerConfig={src:[fullUrl],html5:iosDevice,// Usar HTML5 Audio em iOS para compatibilidade\npreload:true,format:['mp3','mpeg','opus','ogg','oga','wav','aac','caf','m4a','mp4','weba','webm','dolby','flac'],volume:1.0,rate:1.0,pool:5,// Aumentar o pool para mais confiabilidade\nxhr:{method:'GET',headers:{Range:'bytes=0-'// Ajuda a carregar arquivos grandes\n}},onload:function(){console.log('[DEBUG] Howler carregado com sucesso. Duração:',this.duration());setMetadataLoaded(true);const validDuration=validateDuration(this.duration());setAudioDuration(validDuration||30);loadAttempts.current=0;setLoadingFailed(false);},onloaderror:function(id,error){console.error('[ERROR] Erro ao carregar áudio via Howler:',error);loadAttempts.current+=1;if(loadAttempts.current>=3){setLoadingFailed(true);setMetadataLoaded(true);// Para não mostrar \"Carregando...\" infinitamente\nconsole.warn('[WARN] Número máximo de tentativas de carregamento atingido');}else{console.log(\"[INFO] Tentativa \".concat(loadAttempts.current,\" de 3. Tentando estrat\\xE9gia alternativa...\"));// Tentar novamente com configuração HTML5 alternativa\nsoundRef.current.unload();// Se estamos no iOS, tentar outras configurações específicas\nif(iosDevice){// Alternar entre modos html5\nconst useHtml5=loadAttempts.current%2===0;soundRef.current=new Howl({...howlerConfig,html5:useHtml5,preload:useHtml5?'metadata':true});}else{// Para outros dispositivos, alternar html5\nsoundRef.current=new Howl({...howlerConfig,html5:!howlerConfig.html5});}}},onplayerror:function(id,error){console.error('[ERROR] Erro ao reproduzir áudio via Howler:',error);// No iOS, desbloquear áudio e tentar novamente\nif(iosDevice){unlockAudioOnIOS();// Verificar se está em modo silencioso\ncheckSilentMode().then(silent=>{setIsSilentMode(silent);// Estratégia específica para modo silencioso\nif(silent){console.log('[INFO] Tentando reproduzir mesmo em modo silencioso...');// Em modo silencioso, tenta configurações alternativas\nsoundRef.current.unload();setTimeout(()=>{// Usar configuração especial para modo silencioso\nsoundRef.current=new Howl({...howlerConfig,html5:true,volume:1.0// Volume máximo para tentar superar o modo silencioso\n});soundRef.current.play();},300);}else{// Se não está em modo silencioso, tentar reproduzir novamente\nsetTimeout(()=>{soundRef.current.play();},300);}});}},onend:function(){console.log('[DEBUG] Reprodução finalizada');setIsPlaying(false);setCurrentTime(0);if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}}};soundRef.current=new Howl(howlerConfig);}catch(error){console.error('[ERROR] Exceção ao configurar Howler:',error);setLoadingFailed(true);setMetadataLoaded(true);}// Limpar intervalo quando componente desmontar\nreturn()=>{if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}if(soundRef.current){soundRef.current.unload();soundRef.current=null;}};},[audioUrl]);const togglePlayback=()=>{if(!soundRef.current)return;// Sempre desbloquear áudio no iOS quando o usuário interage\nif(isIOS()){unlockAudioOnIOS();}if(isPlaying){// Se já está tocando, pausar\nsoundRef.current.pause();if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}}else{// Se está pausado, tocar\n// Verificar modo silencioso no iOS\nif(isIOS()){checkSilentMode().then(silent=>{setIsSilentMode(silent);if(silent){console.log('[INFO] Tentando reproduzir mesmo em modo silencioso...');}});}try{const playId=soundRef.current.play();// Em caso de erro ao tocar, criar fallback para HTML5 audio\nsoundRef.current.once('playerror',()=>{console.log('[INFO] Erro ao reproduzir, tentando com Audio element nativo');// Fallback para áudio nativo em caso de erro\ntry{const audio=new Audio(getFullUrl(audioUrl));audio.volume=1.0;audio.onended=()=>{setIsPlaying(false);setCurrentTime(0);if(progressInterval.current){clearInterval(progressInterval.current);}};audio.play();// Atualizar o progresso com esse elemento de áudio\nprogressInterval.current=setInterval(()=>{setCurrentTime(audio.currentTime);},100);}catch(e){console.error('[ERROR] Fallback para áudio nativo falhou:',e);setIsPlaying(false);}});// Atualizar o progresso de reprodução em intervalos regulares\nprogressInterval.current=setInterval(()=>{if(soundRef.current&&soundRef.current.playing()){setCurrentTime(soundRef.current.seek());}},100);}catch(e){console.error('[ERROR] Erro ao iniciar reprodução:',e);setIsPlaying(false);return;// Não continuar se não conseguir reproduzir\n}}setIsPlaying(!isPlaying);};return/*#__PURE__*/React.createElement(Box,{className:classes.audioContainer,style:{alignSelf:isRight?\"flex-end\":\"flex-start\"}},/*#__PURE__*/React.createElement(\"div\",{className:classes.playerControls},/*#__PURE__*/React.createElement(IconButton,{className:classes.playButton,onClick:togglePlayback,disabled:loadingFailed,size:\"small\"},isPlaying?/*#__PURE__*/React.createElement(PauseIcon,{fontSize:\"small\"}):/*#__PURE__*/React.createElement(PlayArrowIcon,{fontSize:\"small\"})),/*#__PURE__*/React.createElement(\"div\",{className:classes.progressContainer},/*#__PURE__*/React.createElement(LinearProgress,{className:classes.progressBar,variant:\"determinate\",value:audioDuration>0?currentTime/audioDuration*100:0}),/*#__PURE__*/React.createElement(\"div\",{className:classes.timeInfo},/*#__PURE__*/React.createElement(Typography,{className:classes.timeText,variant:\"caption\"},formatTime(currentTime)),/*#__PURE__*/React.createElement(Typography,{className:classes.timeText,variant:\"caption\"},loadingFailed?\"Erro\":!metadataLoaded?\"Carregando...\":formatTime(audioDuration))))));}","map":null,"metadata":{},"sourceType":"module"}