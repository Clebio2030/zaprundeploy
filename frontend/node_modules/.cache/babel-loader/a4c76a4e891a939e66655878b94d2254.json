{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import{makeStyles}from\"@material-ui/core/styles\";import{IconButton,Typography,LinearProgress,Box}from\"@material-ui/core\";import PlayArrowIcon from\"@material-ui/icons/PlayArrow\";import PauseIcon from\"@material-ui/icons/Pause\";import AudiotrackIcon from\"@material-ui/icons/Audiotrack\";const useStyles=makeStyles(theme=>({audioContainer:{display:\"flex\",flexDirection:\"column\",width:\"100%\",maxWidth:250,backgroundColor:theme.palette.background.default,borderRadius:8,padding:theme.spacing(1),border:\"1px solid rgba(0, 0, 0, 0.08)\"},playerControls:{display:\"flex\",alignItems:\"center\"},playButton:{padding:8},progressContainer:{display:\"flex\",flexDirection:\"column\",flex:1,marginLeft:theme.spacing(1)},progressBar:{height:4,borderRadius:2,marginBottom:4},timeInfo:{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\"},timeText:{fontSize:11,color:theme.palette.text.secondary},audioIcon:{fontSize:20,color:theme.palette.primary.main,marginRight:theme.spacing(1)}}));const formatTime=seconds=>{const mins=Math.floor(seconds/60);const secs=Math.floor(seconds%60);return\"\".concat(mins.toString().padStart(2,\"0\"),\":\").concat(secs.toString().padStart(2,\"0\"));};const getFullUrl=url=>{if(!url)return\"\";// Se a URL já começa com http ou https, retornar como está\nif(url.startsWith('http://')||url.startsWith('https://')){return url;}// Se a URL é relativa, adicionar o endereço do backend\nconst BACKEND_URL=process.env.REACT_APP_BACKEND_URL||window.location.origin;// Se começa com '/', removemos a barra para evitar duplicação\nconst cleanUrl=url.startsWith('/')?url.substring(1):url;// Verificar se já contém o prefixo public/ antes de adicioná-lo\nconst urlWithPublic=cleanUrl.startsWith('public/')?cleanUrl:\"public/\".concat(cleanUrl);const fullUrl=\"\".concat(BACKEND_URL,\"/\").concat(urlWithPublic);console.log('[DEBUG AUDIO URL]',{original:url,final:fullUrl});return fullUrl;};export default function ChatAudioPlayer(_ref){let{audioUrl,duration,isRight}=_ref;const classes=useStyles();const[isPlaying,setIsPlaying]=useState(false);const[currentTime,setCurrentTime]=useState(0);const[audioDuration,setAudioDuration]=useState(duration||0);const audioRef=useRef(null);const progressInterval=useRef(null);useEffect(()=>{// Limpar intervalo quando componente desmontar\nreturn()=>{if(progressInterval.current){clearInterval(progressInterval.current);}if(audioRef.current){audioRef.current.pause();}};},[]);const togglePlayback=()=>{if(!audioRef.current){const fullUrl=getFullUrl(audioUrl);console.log('Tentando reproduzir áudio de:',fullUrl);audioRef.current=new Audio();// Adicionar tratamento de eventos\naudioRef.current.addEventListener(\"loadedmetadata\",()=>{console.log('Áudio carregado, duração:',audioRef.current.duration);setAudioDuration(audioRef.current.duration);});audioRef.current.addEventListener(\"ended\",()=>{console.log('Reprodução finalizada');setIsPlaying(false);setCurrentTime(0);clearInterval(progressInterval.current);});// Configurar o tratamento de erros para tentar URLs alternativas\naudioRef.current.addEventListener(\"error\",e=>{console.error('Erro ao carregar áudio:',e);console.error('Código de erro:',audioRef.current.error?audioRef.current.error.code:'Desconhecido');console.error('URL que falhou:',audioRef.current.src);// Estratégia de fallback - tentar diferentes formatos de URL\nconst BACKEND_URL=process.env.REACT_APP_BACKEND_URL||window.location.origin;// Estratégias de URL para tentar\nconst urlStrategies=[// URLs relativas com diferentes padrões\n\"\".concat(BACKEND_URL,\"/\").concat(audioUrl.startsWith('/')?audioUrl.substring(1):audioUrl),\"\".concat(BACKEND_URL,\"/public/\").concat(audioUrl.startsWith('/')?audioUrl.substring(1):audioUrl),// URL como veio do servidor, sem manipulação\naudioUrl.startsWith('http')?audioUrl:\"\".concat(BACKEND_URL,\"/\").concat(audioUrl)];// Encontrar qual estratégia tentar a seguir\nconst currentUrlIndex=urlStrategies.findIndex(url=>url===audioRef.current.src);const nextUrlIndex=currentUrlIndex+1;// Se ainda temos estratégias para tentar\nif(nextUrlIndex<urlStrategies.length){console.log(\"Tentando URL alternativa (\".concat(nextUrlIndex+1,\"/\").concat(urlStrategies.length,\"):\"),urlStrategies[nextUrlIndex]);audioRef.current.src=urlStrategies[nextUrlIndex];audioRef.current.load();// Tentar reproduzir novamente\nif(isPlaying){audioRef.current.play().catch(innerError=>{console.error('Falha na tentativa alternativa:',innerError);});}return;}// Se chegamos aqui, todas as tentativas falharam\nsetIsPlaying(false);console.error('Todas as tentativas de URL falharam');});// Definir a URL inicial e carregar o áudio\naudioRef.current.src=fullUrl;audioRef.current.load();}if(isPlaying){audioRef.current.pause();clearInterval(progressInterval.current);}else{audioRef.current.play().catch(error=>{console.error('Erro ao iniciar reprodução:',error);setIsPlaying(false);});progressInterval.current=setInterval(()=>{setCurrentTime(audioRef.current.currentTime);},100);}setIsPlaying(!isPlaying);};return/*#__PURE__*/React.createElement(Box,{className:classes.audioContainer},/*#__PURE__*/React.createElement(\"div\",{className:classes.playerControls},/*#__PURE__*/React.createElement(IconButton,{className:classes.playButton,size:\"small\",onClick:togglePlayback},isPlaying?/*#__PURE__*/React.createElement(PauseIcon,null):/*#__PURE__*/React.createElement(PlayArrowIcon,null)),/*#__PURE__*/React.createElement(\"div\",{className:classes.progressContainer},/*#__PURE__*/React.createElement(LinearProgress,{className:classes.progressBar,variant:\"determinate\",value:audioDuration?currentTime/audioDuration*100:0}),/*#__PURE__*/React.createElement(\"div\",{className:classes.timeInfo},/*#__PURE__*/React.createElement(Typography,{className:classes.timeText},formatTime(currentTime)),/*#__PURE__*/React.createElement(Typography,{className:classes.timeText},formatTime(audioDuration))))));}","map":null,"metadata":{},"sourceType":"module"}