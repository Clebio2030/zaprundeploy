{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import{makeStyles,useTheme}from\"@material-ui/core/styles\";import{IconButton,Typography,LinearProgress,Box,Snackbar,Paper,Button}from\"@material-ui/core\";import PlayArrowIcon from\"@material-ui/icons/PlayArrow\";import PauseIcon from\"@material-ui/icons/Pause\";import RefreshIcon from\"@material-ui/icons/Refresh\";import AudiotrackIcon from\"@material-ui/icons/Audiotrack\";import{Howl,Howler}from'howler';const useStyles=makeStyles(theme=>({audioContainer:{display:\"flex\",flexDirection:\"column\",width:\"100%\",maxWidth:250,backgroundColor:\"transparent\",borderRadius:8,padding:theme.spacing(0.5),border:\"none\",overflow:\"hidden\"},playerControls:{display:\"flex\",alignItems:\"center\",backgroundColor:theme.palette.type===\"dark\"?\"rgba(60, 60, 60, 0.7)\":\"rgba(255, 255, 255, 0.7)\",borderRadius:24,padding:theme.spacing(0.5),boxShadow:\"0px 1px 3px rgba(0, 0, 0, 0.08)\"},playButton:{padding:6,color:theme.palette.primary.main},progressContainer:{display:\"flex\",flexDirection:\"column\",flex:1,marginLeft:theme.spacing(1),marginRight:theme.spacing(1)},progressBar:{height:4,borderRadius:2,marginBottom:4,backgroundColor:\"rgba(0, 0, 0, 0.1)\",\"& .MuiLinearProgress-bar\":{backgroundColor:theme.palette.primary.main}},timeInfo:{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\"},timeText:{fontSize:10,color:theme.palette.text.secondary,fontWeight:500},audioIcon:{fontSize:20,color:theme.palette.primary.main,marginRight:theme.spacing(1)},debugLog:{position:\"fixed\",bottom:100,left:10,right:10,maxHeight:150,overflowY:\"auto\",padding:theme.spacing(1),zIndex:9999,backgroundColor:\"rgba(0,0,0,0.7)\",color:\"#fff\",borderRadius:4,fontSize:10,fontFamily:\"monospace\"},logEntry:{margin:\"2px 0\",borderBottom:\"1px solid rgba(255,255,255,0.2)\",paddingBottom:2},playerStateIndicator:{fontSize:8,padding:theme.spacing(0.5),backgroundColor:theme.palette.primary.main,color:\"#fff\",borderRadius:4,position:\"absolute\",bottom:-16,left:\"50%\",transform:\"translateX(-50%)\",zIndex:100,whiteSpace:\"nowrap\"},retryButton:{position:\"absolute\",right:8,top:8,backgroundColor:theme.palette.error.main,color:\"#fff\",padding:2,minWidth:\"unset\",width:24,height:24,fontSize:10,borderRadius:\"50%\"}}));const formatTime=seconds=>{// Verificar se o valor é válido\nif(seconds===undefined||seconds===null||!isFinite(seconds)||isNaN(seconds)){return\"00:00\";}// Garantir que seja um número positivo\nconst safeSeconds=Math.max(0,Number(seconds));const mins=Math.floor(safeSeconds/60);const secs=Math.floor(safeSeconds%60);return\"\".concat(mins.toString().padStart(2,\"0\"),\":\").concat(secs.toString().padStart(2,\"0\"));};const getFullUrl=url=>{if(!url)return\"\";// Se a URL já começa com http ou https, retornar como está\nif(url.startsWith('http://')||url.startsWith('https://')){return url;}// Se a URL é relativa, adicionar o endereço do backend\nconst BACKEND_URL=process.env.REACT_APP_BACKEND_URL||window.location.origin;// Se começa com '/', removemos a barra para evitar duplicação\nconst cleanUrl=url.startsWith('/')?url.substring(1):url;// Verificar se já contém o prefixo public/ antes de adicioná-lo\nconst urlWithPublic=cleanUrl.startsWith('public/')?cleanUrl:\"public/\".concat(cleanUrl);const fullUrl=\"\".concat(BACKEND_URL,\"/\").concat(urlWithPublic);console.log('[DEBUG AUDIO URL]',{original:url,final:fullUrl});return fullUrl;};// Função adicional para resolver problemas de CORS\nconst addCorsProxyIfNeeded=url=>{// Se já for uma URL interna ou localhost, não precisa de proxy\nif(url.includes(window.location.hostname)||url.includes('localhost')||url.includes('127.0.0.1')){return url;}// Tentar adicionar parâmetros de CORS se for URL externa\n// Adicionar timestamp para evitar cache\nconst timestamp=new Date().getTime();const separator=url.includes('?')?'&':'?';// Verificar se a URL é do domínio api2.zaprun.site\nif(url.includes('api2.zaprun.site')){// Tentar usar proxy CORS se a API original não estiver disponível\n// Formato: URL original + parâmetros anti-cache\nreturn\"\".concat(url).concat(separator,\"nocache=\").concat(timestamp,\"&cors=true\");}return\"\".concat(url).concat(separator,\"nocache=\").concat(timestamp);};// Função alternativa para usar proxy CORS quando necessário\nconst getProxiedUrl=url=>{if(!url)return\"\";// Proxy CORS público gratuito\n// Observação: uso limitado, apenas para testes\nconst corsProxies=[\"https://corsproxy.io/?\".concat(encodeURIComponent(url)),\"https://proxy.cors.sh/\".concat(url),\"https://cors-proxy.htmldriven.com/?url=\".concat(encodeURIComponent(url))];// Usar o primeiro proxy na lista\nreturn corsProxies[0];};// Verificar se a URL é acessível\nconst checkUrlAccessibility=async url=>{try{// Tentar fetch com HEAD para verificar se o recurso existe\nconst response=await fetch(url,{method:'HEAD',mode:'no-cors',// Tentar contornar CORS para verificação\ncache:'no-cache'});// No-cors sempre retorna status 0, então não podemos confiar no status\n// Mas se não lançar erro, provavelmente o recurso existe\nreturn true;}catch(error){console.error('Erro ao verificar URL:',error);return false;}};// Função para analisar a URL do áudio e tentar corrigir problemas comuns\nconst sanitizeAndFixAudioUrl=url=>{if(!url)return\"\";// Normalizar URL\nlet fixedUrl=url.trim();// Se a URL não tiver protocolo, adicionar https\nif(!fixedUrl.startsWith('http://')&&!fixedUrl.startsWith('https://')){fixedUrl=\"https://\".concat(fixedUrl);}// Substituir espaços por %20\nfixedUrl=fixedUrl.replace(/\\s+/g,'%20');// Adicionar /public/ no caminho se for URL api2.zaprun.site e não tiver\nif(fixedUrl.includes('api2.zaprun.site')&&!fixedUrl.includes('/public/')){const urlObj=new URL(fixedUrl);const pathParts=urlObj.pathname.split('/').filter(p=>p);if(pathParts.length>0&&pathParts[0]!=='public'){urlObj.pathname=\"/public/\".concat(urlObj.pathname.startsWith('/')?urlObj.pathname.substring(1):urlObj.pathname);fixedUrl=urlObj.toString();}}return fixedUrl;};// Função para detectar iOS\nconst isIOS=()=>{const userAgent=navigator.userAgent||navigator.vendor||window.opera;return /iPad|iPhone|iPod/.test(userAgent)||navigator.platform==='MacIntel'&&navigator.maxTouchPoints>1;};// Função para obter a versão do iOS\nconst getIOSVersion=()=>{if(!isIOS())return 0;const match=navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);if(match){return parseFloat(\"\".concat(match[1],\".\").concat(match[2]));}return 0;};// Desbloquear áudio no iOS - método agressivo\nconst forceUnlockAudio=()=>{if(!isIOS())return;try{// 1. WebAudio API - método mais confiável\nconst AudioContext=window.AudioContext||window.webkitAudioContext;const audioContext=new AudioContext();// Criar oscilador e conectar\nconst oscillator=audioContext.createOscillator();const gainNode=audioContext.createGain();gainNode.gain.value=0.01;// Volume muito baixo, mas não zero\noscillator.connect(gainNode);gainNode.connect(audioContext.destination);// Iniciar e parar rapidamente\noscillator.start(0);oscillator.stop(0.1);// Forçar a retomada do contexto de áudio\nif(audioContext.state==='suspended'){audioContext.resume();}// 2. Reproduzir um arquivo de audio vazio\nconst silentAudio=new Audio('data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABIADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV6urq6urq6urq6urq6urq6urq6v////////////////////////////////8AAAAATGF2YzU4LjU0AAAAAAAAAAAAAAAAJAAAAAAAAAAAASAn4Wq1AAAAAAAAAAAAAAAAAAAAAP/7UMQAAAesTXWUEQBBiS7pyQiCI4OmIQgZBBDKCGMQcRwQQQQQQQQQQQQQQQQQQgQIECBBBBBAQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAiD/+1LEGIAEcAGPoIAAiO2YL/QQAARAgQIECBAgQIECBAgQIECBAgQ');silentAudio.load();silentAudio.loop=false;silentAudio.muted=false;silentAudio.volume=0.1;silentAudio.play().catch(()=>{});// 3. Forçar Howler a desbloquear\nif(Howler){Howler.autoUnlock=true;Howler.html5PoolSize=10;if(typeof Howler._unlockAudio==='function'){Howler._unlockAudio();}}// 4. Usando um clique simulado para trigger de áudio\nconst clickEvent=document.createEvent('MouseEvents');clickEvent.initEvent('click',true,true);document.body.dispatchEvent(clickEvent);}catch(e){console.error('Erro ao desbloquear áudio forçadamente:',e);}};// Função para criar e gerenciar manualmente a reprodução em ambiente iOS\nconst createIOSAudioPlayer=(url,_ref)=>{let{onPlay,onPause,onEnd,onTimeUpdate,onLoad,onError,onDebugLog}=_ref;if(!url||typeof url!=='string'){if(onDebugLog)onDebugLog(\"ERRO: URL de áudio inválida ou vazia\");if(onError)onError(new Error(\"URL inválida\"));return null;}try{// Limpar qualquer instância Howler anterior para economia de memória\nHowler.unload();if(onDebugLog)onDebugLog(\"Criando player iOS para URL: \"+url);// Criar elemento de áudio nativo\nconst audioElement=new Audio();// Forçar configurações de baixo nível\naudioElement.autoplay=false;audioElement.preload='auto';audioElement.crossOrigin='anonymous';audioElement.volume=1.0;// Adicionar atributos para evitar problemas de reprodução no iOS\naudioElement.setAttribute('playsinline','');audioElement.setAttribute('webkit-playsinline','');// Eventos do elemento de áudio\naudioElement.addEventListener('canplaythrough',()=>{const safeDuration=isFinite(audioElement.duration)?audioElement.duration:0;if(onDebugLog)onDebugLog(\"iOS Audio: canplaythrough, duração: \"+safeDuration+\"s\");if(onLoad&&safeDuration>0)onLoad(safeDuration);});audioElement.addEventListener('loadedmetadata',()=>{const safeDuration=isFinite(audioElement.duration)?audioElement.duration:0;if(onDebugLog)onDebugLog(\"iOS Audio: loadedmetadata, duração: \"+safeDuration+\"s\");if(onLoad&&safeDuration>0)onLoad(safeDuration);});audioElement.addEventListener('error',e=>{const errorCode=e.target.error?e.target.error.code:0;const errorDetails=e.target.error?\"C\\xF3digo: \".concat(errorCode,\", Mensagem: \").concat(e.target.error.message||\"\"):\"Erro desconhecido\";if(onDebugLog)onDebugLog(\"ERRO iOS Audio: \"+errorDetails);// Exibir detalhes específicos do erro de mídia\nlet errorMessage=\"Erro desconhecido\";switch(errorCode){case 1:errorMessage=\"Operação abortada\";break;case 2:errorMessage=\"Erro de rede\";break;case 3:errorMessage=\"Erro de decodificação\";break;case 4:errorMessage=\"Formato não suportado ou URL inacessível\";break;}if(onDebugLog)onDebugLog(\"ERRO iOS Audio detalhado: \"+errorMessage);console.error('Erro no elemento de áudio:',e);if(onError)onError(e);});audioElement.addEventListener('ended',()=>{if(onDebugLog)onDebugLog(\"iOS Audio: ended\");if(onEnd)onEnd();});audioElement.addEventListener('timeupdate',()=>{if(onTimeUpdate)onTimeUpdate(audioElement.currentTime);});audioElement.addEventListener('playing',()=>{if(onDebugLog)onDebugLog(\"iOS Audio: playing\");});audioElement.addEventListener('waiting',()=>{if(onDebugLog)onDebugLog(\"iOS Audio: waiting\");});audioElement.addEventListener('stalled',()=>{if(onDebugLog)onDebugLog(\"iOS Audio: stalled\");});audioElement.addEventListener('suspend',()=>{if(onDebugLog)onDebugLog(\"iOS Audio: suspend\");});// Definir a URL do áudio\ntry{audioElement.src=url;audioElement.load();if(onDebugLog)onDebugLog(\"iOS Audio: load chamado\");}catch(loadError){if(onDebugLog)onDebugLog(\"ERRO iOS Audio ao carregar URL: \"+loadError.message);if(onError)onError(loadError);}// Funções para controlar o áudio\nconst play=()=>{// Tentar desbloquear o áudio antes de reproduzir\nforceUnlockAudio();if(onDebugLog)onDebugLog(\"iOS Audio: tentando reproduzir\");// Verificar se o elemento está em estado válido\nif(audioElement.error){if(onDebugLog)onDebugLog(\"ERRO iOS Audio antes de play: \"+(audioElement.error?\"C\\xF3digo: \".concat(audioElement.error.code):\"Estado inválido\"));if(onError)onError(audioElement.error||new Error(\"Estado inválido\"));return;}// Atraso pequeno para garantir que o áudio seja desbloqueado\nsetTimeout(()=>{if(onDebugLog)onDebugLog(\"iOS Audio: estado antes de play: \"+(audioElement.paused?\"pausado\":\"tocando\"));if(!audioElement.paused){if(onDebugLog)onDebugLog(\"iOS Audio: já está reproduzindo, nada a fazer\");if(onPlay)onPlay();return;}try{const playPromise=audioElement.play();if(playPromise){if(onDebugLog)onDebugLog(\"iOS Audio: promise de play retornada\");playPromise.then(()=>{if(onDebugLog)onDebugLog(\"iOS Audio: promise de play resolvida com sucesso\");if(onPlay)onPlay();}).catch(error=>{if(onDebugLog)onDebugLog(\"ERRO iOS Audio: falha na promise de play: \"+error.message);console.error('Erro ao reproduzir áudio:',error);// Verificar se o erro está relacionado a interação do usuário\nif(error.name==='NotAllowedError'){if(onDebugLog)onDebugLog(\"ERRO iOS Audio: reprodução não permitida sem interação do usuário\");}// Tentar estratégia alternativa para iOS\nforceUnlockAudio();if(onDebugLog)onDebugLog(\"iOS Audio: tentando estratégia alternativa após erro\");// Última tentativa - reproduzir com volume zero e depois aumentar\naudioElement.volume=0;setTimeout(()=>{if(onDebugLog)onDebugLog(\"iOS Audio: última tentativa com volume zero\");try{const finalAttempt=audioElement.play();if(finalAttempt){finalAttempt.then(()=>{if(onDebugLog)onDebugLog(\"iOS Audio: última tentativa bem-sucedida\");// Aumentar gradualmente o volume para evitar problemas\nconst volumeInterval=setInterval(()=>{if(audioElement.volume<1.0){audioElement.volume+=0.1;}else{clearInterval(volumeInterval);}},100);if(onPlay)onPlay();}).catch(finalError=>{if(onDebugLog)onDebugLog(\"ERRO iOS Audio: falha na última tentativa: \"+finalError.message);console.error('Falha na última tentativa de reprodução:',finalError);if(onError)onError(finalError);});}else{if(onDebugLog)onDebugLog(\"ERRO iOS Audio: última tentativa não retornou promise\");}}catch(finalCatchError){if(onDebugLog)onDebugLog(\"ERRO iOS Audio: exceção na última tentativa: \"+finalCatchError.message);if(onError)onError(finalCatchError);}},500);});}else{// Navegadores antigos que não suportam promises\nif(onDebugLog)onDebugLog(\"iOS Audio: navegador antigo sem suporte a promise\");if(onPlay)onPlay();}}catch(playError){if(onDebugLog)onDebugLog(\"ERRO iOS Audio: exceção ao chamar play(): \"+playError.message);if(onError)onError(playError);}},100);};const pause=()=>{if(onDebugLog)onDebugLog(\"iOS Audio: pause chamado\");audioElement.pause();if(onPause)onPause();};const stop=()=>{audioElement.pause();audioElement.currentTime=0;if(onPause)onPause();};const seek=time=>{audioElement.currentTime=time;};const setVolume=volume=>{audioElement.volume=volume;};const getCurrentTime=()=>{try{const time=audioElement.currentTime;return isFinite(time)?time:0;}catch(e){return 0;}};const getDuration=()=>{try{const duration=audioElement.duration;return isFinite(duration)?duration:0;}catch(e){return 0;}};const isPlaying=()=>{try{return!audioElement.paused;}catch(e){return false;}};const cleanup=()=>{audioElement.pause();audioElement.src='';audioElement.load();};return{play,pause,stop,seek,setVolume,getCurrentTime,getDuration,isPlaying,cleanup,element:audioElement// Expor o elemento para inspeção\n};}catch(e){console.error('Erro ao criar player iOS:',e);if(onDebugLog)onDebugLog(\"ERRO ao criar player iOS: \"+e.message);if(onError)onError(e);return null;}};export default function ChatAudioPlayer(_ref2){let{audioUrl,duration,isRight}=_ref2;const classes=useStyles();const theme=useTheme();const[isPlaying,setIsPlaying]=useState(false);const[currentTime,setCurrentTime]=useState(0);const[audioDuration,setAudioDuration]=useState(duration||0);const[metadataLoaded,setMetadataLoaded]=useState(false);const[loadingFailed,setLoadingFailed]=useState(false);const[showTryAgain,setShowTryAgain]=useState(false);const[debugLogs,setDebugLogs]=useState([]);const[showDebugLogs,setShowDebugLogs]=useState(false);const[playerState,setPlayerState]=useState('idle');// idle, loading, ready, playing, paused, error\nconst[playerMode,setPlayerMode]=useState('auto');// auto, ios, howler, direct, proxy\nconst[useProxy,setUseProxy]=useState(false);const soundRef=useRef(null);const iosPlayerRef=useRef(null);const progressInterval=useRef(null);const loadAttempts=useRef(0);const audioUrlRef=useRef(audioUrl);// Atualizar ref quando a URL mudar\nuseEffect(()=>{audioUrlRef.current=audioUrl;},[audioUrl]);// Função para adicionar logs\nconst addDebugLog=message=>{console.log(\"[DEBUG LOG]\",message);const timestamp=new Date().toLocaleTimeString();setDebugLogs(prev=>{const newLogs=[{time:timestamp,msg:message},...prev];// Manter apenas os últimos 20 logs\nreturn newLogs.slice(0,20);});};// Mostrar/esconder logs com triple tap\nuseEffect(()=>{let tapCount=0;let lastTap=0;const handleTap=()=>{const now=new Date().getTime();const timeDiff=now-lastTap;if(timeDiff<400&&tapCount<3){tapCount++;}else{tapCount=1;}if(tapCount===3){setShowDebugLogs(prev=>!prev);tapCount=0;}lastTap=now;};document.addEventListener('click',handleTap);return()=>{document.removeEventListener('click',handleTap);};},[]);// Função para criar uma notificação para o usuário tentar novamente\nconst showTryAgainMessage=()=>{setShowTryAgain(true);setTimeout(()=>setShowTryAgain(false),3000);};// Validar duração para garantir valor numérico válido\nconst validateDuration=value=>{// Verificar se o valor é numérico e finito\nif(value===undefined||value===null||!isFinite(value)||isNaN(value)||value<=0){return 0;}return parseFloat(value);};// Desbloquear áudio ao montar o componente\nuseEffect(()=>{// Tentar desbloquear o áudio logo ao carregar o componente\nif(isIOS()){forceUnlockAudio();}return()=>{// Limpeza ao desmontar\nif(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}if(soundRef.current){soundRef.current.unload();soundRef.current=null;}if(iosPlayerRef.current){iosPlayerRef.current.cleanup();iosPlayerRef.current=null;}};},[]);// Sempre que a duração for definida diretamente via prop, considerar os metadados como carregados\nuseEffect(()=>{const validDuration=validateDuration(duration);if(validDuration>0){console.log(\"[DEBUG] Prop de dura\\xE7\\xE3o v\\xE1lida recebida: \".concat(validDuration,\"s\"));setAudioDuration(validDuration);setMetadataLoaded(true);}else if(audioDuration>0){// Se já temos uma duração válida no estado, considerar os metadados como carregados\nsetMetadataLoaded(true);}},[duration,audioDuration]);// Função para mudar o modo de player e reinicializar\nconst switchPlayerMode=()=>{addDebugLog(\"Alternando modo do player: \".concat(playerMode,\" \\u2192 \").concat(getNextPlayerMode()));const nextMode=getNextPlayerMode();setPlayerMode(nextMode);// Limpar estado e recursos\nif(soundRef.current){soundRef.current.unload();soundRef.current=null;}if(iosPlayerRef.current){iosPlayerRef.current.cleanup();iosPlayerRef.current=null;}if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}// Resetar estados\nsetLoadingFailed(false);setMetadataLoaded(false);setPlayerState('loading');setCurrentTime(0);setIsPlaying(false);setUseProxy(false);// Re-inicializar com o novo modo\ninitializePlayer(audioUrlRef.current,nextMode);};// Determinar o próximo modo de player em uma rotação\nconst getNextPlayerMode=()=>{switch(playerMode){case'auto':return'howler';case'howler':return'ios';case'ios':return'direct';case'direct':return'proxy';case'proxy':default:return'auto';}};// Inicializar o player com um modo específico\nconst initializePlayer=function(url){let mode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'auto';if(!url){setMetadataLoaded(true);setPlayerState('idle');return;}// Tentar corrigir problemas na URL\nlet fixedUrl=sanitizeAndFixAudioUrl(url);// Aplicar tratamentos adicionais à URL\nlet fullUrl=getFullUrl(fixedUrl);fullUrl=addCorsProxyIfNeeded(fullUrl);// Se estiver no modo proxy, usar URL com proxy\nif(mode==='proxy'||useProxy){fullUrl=getProxiedUrl(fullUrl);}addDebugLog(\"Inicializando player (modo: \".concat(mode,\"): \").concat(fullUrl));// Escolher o tipo de player baseado no modo\nif(mode==='auto'){// Comportamento padrão - iOS para iOS, Howler para o resto\nif(isIOS()){tryIOSPlayer(fullUrl);}else{tryHowlerPlayer(fullUrl);}}else if(mode==='ios'){// Forçar player iOS\ntryIOSPlayer(fullUrl);}else if(mode==='howler'){// Forçar Howler\ntryHowlerPlayer(fullUrl);}else if(mode==='direct'){// Usar elemento de áudio nativo diretamente\ntryDirectPlayer(fullUrl);}else if(mode==='proxy'){// Usar proxy CORS (alternar para URL com proxy)\nsetUseProxy(true);// Determinar o melhor player para URL com proxy\nif(isIOS()){tryIOSPlayer(fullUrl);}else{tryHowlerPlayer(fullUrl);}}};// Player iOS\nconst tryIOSPlayer=url=>{const iosVersion=getIOSVersion();addDebugLog(\"Usando player iOS (v\".concat(iosVersion,\")\"));// Desbloquear o áudio do sistema\nforceUnlockAudio();try{// Criar player nativo para iOS\niosPlayerRef.current=createIOSAudioPlayer(url,{onLoad:audioDuration=>{addDebugLog(\"iOS: \\xE1udio carregado (\".concat(audioDuration,\"s)\"));const validDuration=validateDuration(audioDuration);setAudioDuration(validDuration||30);setMetadataLoaded(true);setLoadingFailed(false);setPlayerState('ready');},onPlay:()=>{addDebugLog(\"iOS: reprodu\\xE7\\xE3o iniciada\");setPlayerState('playing');},onPause:()=>{addDebugLog(\"iOS: reprodu\\xE7\\xE3o pausada\");setPlayerState('paused');},onEnd:()=>{addDebugLog(\"iOS: reprodu\\xE7\\xE3o finalizada\");setIsPlaying(false);setCurrentTime(0);setPlayerState('ready');if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}},onTimeUpdate:time=>{setCurrentTime(time);},onError:error=>{addDebugLog(\"ERRO iOS: \".concat((error===null||error===void 0?void 0:error.message)||\"desconhecido\"));setLoadingFailed(true);setMetadataLoaded(true);setPlayerState('error');showTryAgainMessage();},onDebugLog:addDebugLog});// Se temos duração prévia, usar para mostrar mesmo que não consiga carregar metadata\nif(duration>0){setAudioDuration(duration);setMetadataLoaded(true);setPlayerState('ready');}}catch(error){addDebugLog(\"ERRO ao criar player iOS: \".concat((error===null||error===void 0?void 0:error.message)||\"desconhecido\"));setLoadingFailed(true);setMetadataLoaded(true);setPlayerState('error');}};// Player direto - elemento de áudio nativo mais simples\nconst tryDirectPlayer=url=>{addDebugLog(\"Usando player nativo direto\");try{// Criar um elemento de áudio simples\nconst directAudio=new Audio(url);// Configurações básicas\ndirectAudio.preload='auto';directAudio.setAttribute('playsinline','');directAudio.setAttribute('webkit-playsinline','');// Eventos\ndirectAudio.addEventListener('loadedmetadata',()=>{const safeDuration=isFinite(directAudio.duration)?directAudio.duration:0;addDebugLog(\"Player direto: metadata carregada, dura\\xE7\\xE3o \".concat(safeDuration,\"s\"));setAudioDuration(safeDuration||30);setMetadataLoaded(true);setPlayerState('ready');});directAudio.addEventListener('error',e=>{var _e$target$error;addDebugLog(\"ERRO Player direto: \".concat(((_e$target$error=e.target.error)===null||_e$target$error===void 0?void 0:_e$target$error.code)||\"desconhecido\"));setLoadingFailed(true);setPlayerState('error');});directAudio.addEventListener('playing',()=>{addDebugLog(\"Player direto: reprodu\\xE7\\xE3o iniciada\");setPlayerState('playing');});directAudio.addEventListener('pause',()=>{addDebugLog(\"Player direto: pausado\");setPlayerState('paused');});directAudio.addEventListener('ended',()=>{addDebugLog(\"Player direto: finalizado\");setIsPlaying(false);setCurrentTime(0);setPlayerState('ready');});directAudio.addEventListener('timeupdate',()=>{setCurrentTime(directAudio.currentTime||0);});// Armazenar na ref do soundRef\nsoundRef.current={play:()=>{addDebugLog(\"Player direto: solicita\\xE7\\xE3o de play\");forceUnlockAudio();directAudio.play().catch(e=>{addDebugLog(\"ERRO Player direto: falha ao reproduzir: \".concat((e===null||e===void 0?void 0:e.message)||\"desconhecido\"));});},pause:()=>{addDebugLog(\"Player direto: solicita\\xE7\\xE3o de pause\");directAudio.pause();},stop:()=>{directAudio.pause();directAudio.currentTime=0;},seek:time=>{directAudio.currentTime=time;},unload:()=>{directAudio.pause();directAudio.src='';directAudio.load();},playing:()=>!directAudio.paused,duration:()=>directAudio.duration||0,seek:()=>directAudio.currentTime||0};// Carregar o áudio\ndirectAudio.load();}catch(error){addDebugLog(\"ERRO ao criar player direto: \".concat((error===null||error===void 0?void 0:error.message)||\"desconhecido\"));setLoadingFailed(true);setMetadataLoaded(true);setPlayerState('error');}};// Player Howler\nconst tryHowlerPlayer=url=>{addDebugLog(\"Usando player Howler\");try{const howlerConfig={src:[url],html5:true,preload:true,format:['mp3','mpeg','opus','ogg','oga','wav','aac','caf','m4a','mp4','weba','webm','dolby','flac'],volume:1.0,onload:function(){addDebugLog(\"Howler: \\xE1udio carregado (\".concat(this.duration(),\"s)\"));setMetadataLoaded(true);const validDuration=validateDuration(this.duration());setAudioDuration(validDuration||30);setLoadingFailed(false);setPlayerState('ready');},onloaderror:function(id,error){addDebugLog(\"ERRO Howler: falha ao carregar \\xE1udio (\".concat(error||\"desconhecido\",\")\"));loadAttempts.current+=1;if(loadAttempts.current>=3){setLoadingFailed(true);setMetadataLoaded(true);setPlayerState('error');showTryAgainMessage();}else{// Tentar novamente com configuração HTML5 alternativa\naddDebugLog(\"Howler: tentativa \".concat(loadAttempts.current,\"/3\"));soundRef.current.unload();soundRef.current=new Howl({...howlerConfig,html5:true});}},onplayerror:function(id,error){addDebugLog(\"ERRO Howler: falha ao reproduzir (\".concat(error||\"desconhecido\",\")\"));setLoadingFailed(true);setPlayerState('error');showTryAgainMessage();},onplay:function(){addDebugLog(\"Howler: reprodução iniciada\");setPlayerState('playing');},onpause:function(){addDebugLog(\"Howler: reprodução pausada\");setPlayerState('paused');},onend:function(){addDebugLog(\"Howler: reprodução finalizada\");setIsPlaying(false);setCurrentTime(0);setPlayerState('ready');if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}}};soundRef.current=new Howl(howlerConfig);}catch(error){addDebugLog(\"ERRO ao configurar Howler: \".concat((error===null||error===void 0?void 0:error.message)||\"desconhecido\"));setLoadingFailed(true);setMetadataLoaded(true);setPlayerState('error');showTryAgainMessage();}};// Configurar o player de áudio quando a URL de áudio mudar\nuseEffect(()=>{// Limpar recursos anteriores\nif(soundRef.current){soundRef.current.unload();soundRef.current=null;}if(iosPlayerRef.current){iosPlayerRef.current.cleanup();iosPlayerRef.current=null;}if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}// Resetar estados para nova URL\nsetLoadingFailed(false);setMetadataLoaded(false);setCurrentTime(0);setIsPlaying(false);loadAttempts.current=0;// Inicializar player com o modo atual\ninitializePlayer(audioUrl,playerMode);},[audioUrl,duration,playerMode]);const togglePlayback=()=>{addDebugLog(\"Solicitada altera\\xE7\\xE3o de reprodu\\xE7\\xE3o: \".concat(isPlaying?\"pause\":\"play\"));// No iOS, usar o player nativo especial\nif(isIOS()&&iosPlayerRef.current){addDebugLog(\"Usando player iOS\");// Força desbloqueio do áudio antes da tentativa de reprodução\nforceUnlockAudio();if(isPlaying){// Se já está tocando, pausar\naddDebugLog(\"Solicitando pause no iOS\");iosPlayerRef.current.pause();if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}}else{// Se está pausado, tocar\naddDebugLog(\"Solicitando play no iOS\");iosPlayerRef.current.play();// Verificar se realmente começou a tocar\nsetTimeout(()=>{if(iosPlayerRef.current&&iosPlayerRef.current.element){const isActuallyPlaying=!iosPlayerRef.current.element.paused;addDebugLog(\"Status ap\\xF3s 500ms: \".concat(isActuallyPlaying?\"tocando\":\"ainda pausado\"));}},500);// Atualizar o progresso\nif(!progressInterval.current){progressInterval.current=setInterval(()=>{if(iosPlayerRef.current&&iosPlayerRef.current.isPlaying()){setCurrentTime(iosPlayerRef.current.getCurrentTime());}},100);}}setIsPlaying(!isPlaying);return;}// Para outros navegadores, usar Howler\nif(!soundRef.current){addDebugLog(\"ERRO: player Howler não inicializado\");return;}if(isPlaying){// Se já está tocando, pausar\naddDebugLog(\"Solicitando pause no Howler\");soundRef.current.pause();if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}}else{// Se está pausado, tocar\ntry{addDebugLog(\"Solicitando play no Howler\");const playId=soundRef.current.play();// Verificar se realmente começou a tocar\nsetTimeout(()=>{const isActuallyPlaying=soundRef.current&&soundRef.current.playing();addDebugLog(\"Status ap\\xF3s 500ms: \".concat(isActuallyPlaying?\"tocando\":\"ainda pausado\"));},500);// Atualizar o progresso de reprodução em intervalos regulares\nprogressInterval.current=setInterval(()=>{if(soundRef.current&&soundRef.current.playing()){setCurrentTime(soundRef.current.seek());}},100);}catch(e){addDebugLog(\"ERRO ao iniciar reprodu\\xE7\\xE3o: \".concat((e===null||e===void 0?void 0:e.message)||\"desconhecido\"));setLoadingFailed(true);setPlayerState('error');showTryAgainMessage();return;// Não continuar se não conseguir reproduzir\n}}setIsPlaying(!isPlaying);};// Resetar o player para a URL original\nconst resetPlayer=()=>{addDebugLog(\"Reiniciando player completamente\");// Limpar estado e recursos\nif(soundRef.current){soundRef.current.unload();soundRef.current=null;}if(iosPlayerRef.current){iosPlayerRef.current.cleanup();iosPlayerRef.current=null;}if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}// Resetar estados\nsetLoadingFailed(false);setMetadataLoaded(false);setPlayerState('loading');setCurrentTime(0);setIsPlaying(false);setPlayerMode('auto');setUseProxy(false);loadAttempts.current=0;// Re-inicializar com a URL atual\ninitializePlayer(audioUrlRef.current,'auto');};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Box,{className:classes.audioContainer,style:{alignSelf:isRight?\"flex-end\":\"flex-start\",position:\"relative\"}},/*#__PURE__*/React.createElement(\"div\",{className:classes.playerControls},/*#__PURE__*/React.createElement(IconButton,{className:classes.playButton,onClick:togglePlayback,disabled:loadingFailed||playerState==='loading',size:\"small\"},isPlaying?/*#__PURE__*/React.createElement(PauseIcon,{fontSize:\"small\"}):/*#__PURE__*/React.createElement(PlayArrowIcon,{fontSize:\"small\"})),/*#__PURE__*/React.createElement(\"div\",{className:classes.progressContainer},/*#__PURE__*/React.createElement(LinearProgress,{className:classes.progressBar,variant:metadataLoaded?\"determinate\":\"indeterminate\",value:audioDuration>0?currentTime/audioDuration*100:0}),/*#__PURE__*/React.createElement(\"div\",{className:classes.timeInfo},/*#__PURE__*/React.createElement(Typography,{className:classes.timeText,variant:\"caption\"},formatTime(currentTime)),/*#__PURE__*/React.createElement(Typography,{className:classes.timeText,variant:\"caption\",onClick:resetPlayer// Clicar no tempo reseta o player\n,style:loadingFailed?{color:theme.palette.error.main,cursor:'pointer'}:{}},loadingFailed?\"Erro\":!metadataLoaded?\"Carregando...\":formatTime(audioDuration))))),(loadingFailed||playerState==='error')&&/*#__PURE__*/React.createElement(IconButton,{className:classes.retryButton,onClick:switchPlayerMode,size:\"small\"},/*#__PURE__*/React.createElement(RefreshIcon,{style:{fontSize:14}})),playerState!=='idle'&&/*#__PURE__*/React.createElement(Typography,{className:classes.playerStateIndicator},playerState==='loading'&&'⏳ Carregando...',playerState==='ready'&&'✅ Pronto',playerState==='playing'&&'▶️ Reproduzindo',playerState==='paused'&&'⏸️ Pausado',playerState==='error'&&\"\\u274C Erro (\".concat(playerMode).concat(useProxy?'+proxy':'',\")\"))),showDebugLogs&&/*#__PURE__*/React.createElement(Paper,{className:classes.debugLog},/*#__PURE__*/React.createElement(Typography,{variant:\"caption\",style:{color:'#fff',fontWeight:'bold'}},\"Logs de \\xC1udio (triplo-clique para fechar)\"),debugLogs.map((log,index)=>/*#__PURE__*/React.createElement(\"div\",{key:index,className:classes.logEntry},/*#__PURE__*/React.createElement(Typography,{variant:\"caption\"},log.time,\": \",log.msg)))),/*#__PURE__*/React.createElement(Snackbar,{open:showTryAgain,message:\"Tente clicar no bot\\xE3o de retry ou verifique o modo silencioso\",autoHideDuration:3000,onClose:()=>setShowTryAgain(false)}));}","map":null,"metadata":{},"sourceType":"module"}