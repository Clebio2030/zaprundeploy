{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import{makeStyles}from\"@material-ui/core/styles\";import{IconButton,Typography,LinearProgress,Box}from\"@material-ui/core\";import PlayArrowIcon from\"@material-ui/icons/PlayArrow\";import PauseIcon from\"@material-ui/icons/Pause\";import AudiotrackIcon from\"@material-ui/icons/Audiotrack\";const useStyles=makeStyles(theme=>({audioContainer:{display:\"flex\",flexDirection:\"column\",width:\"100%\",maxWidth:250,backgroundColor:\"transparent\",borderRadius:8,padding:theme.spacing(0.5),border:\"none\",overflow:\"hidden\"},playerControls:{display:\"flex\",alignItems:\"center\",backgroundColor:theme.palette.type===\"dark\"?\"rgba(60, 60, 60, 0.7)\":\"rgba(255, 255, 255, 0.7)\",borderRadius:24,padding:theme.spacing(0.5),boxShadow:\"0px 1px 3px rgba(0, 0, 0, 0.08)\"},playButton:{padding:6,color:theme.palette.primary.main},progressContainer:{display:\"flex\",flexDirection:\"column\",flex:1,marginLeft:theme.spacing(1),marginRight:theme.spacing(1)},progressBar:{height:4,borderRadius:2,marginBottom:4,backgroundColor:\"rgba(0, 0, 0, 0.1)\",\"& .MuiLinearProgress-bar\":{backgroundColor:theme.palette.primary.main}},timeInfo:{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\"},timeText:{fontSize:10,color:theme.palette.text.secondary,fontWeight:500},audioIcon:{fontSize:20,color:theme.palette.primary.main,marginRight:theme.spacing(1)}}));const formatTime=seconds=>{// Verificar se o valor é válido\nif(seconds===undefined||seconds===null||!isFinite(seconds)||isNaN(seconds)){return\"00:00\";}// Garantir que seja um número positivo\nconst safeSeconds=Math.max(0,Number(seconds));const mins=Math.floor(safeSeconds/60);const secs=Math.floor(safeSeconds%60);return\"\".concat(mins.toString().padStart(2,\"0\"),\":\").concat(secs.toString().padStart(2,\"0\"));};const getFullUrl=url=>{if(!url)return\"\";// Se a URL já começa com http ou https, retornar como está\nif(url.startsWith('http://')||url.startsWith('https://')){return url;}// Se a URL é relativa, adicionar o endereço do backend\nconst BACKEND_URL=process.env.REACT_APP_BACKEND_URL||window.location.origin;// Se começa com '/', removemos a barra para evitar duplicação\nconst cleanUrl=url.startsWith('/')?url.substring(1):url;// Verificar se já contém o prefixo public/ antes de adicioná-lo\nconst urlWithPublic=cleanUrl.startsWith('public/')?cleanUrl:\"public/\".concat(cleanUrl);const fullUrl=\"\".concat(BACKEND_URL,\"/\").concat(urlWithPublic);console.log('[DEBUG AUDIO URL]',{original:url,final:fullUrl});return fullUrl;};// Detecta se é um dispositivo iOS\nconst isIOS=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream;export default function ChatAudioPlayer(_ref){let{audioUrl,duration,isRight}=_ref;const classes=useStyles();const[isPlaying,setIsPlaying]=useState(false);const[currentTime,setCurrentTime]=useState(0);const[audioDuration,setAudioDuration]=useState(duration||0);const[metadataLoaded,setMetadataLoaded]=useState(false);const[loadingFailed,setLoadingFailed]=useState(false);const audioRef=useRef(null);const progressInterval=useRef(null);const loadAttempts=useRef(0);// Sempre que a duração for definida diretamente via prop, considerar os metadados como carregados\nuseEffect(()=>{const validDuration=validateDuration(duration);if(validDuration>0){console.log(\"[DEBUG] Prop de dura\\xE7\\xE3o v\\xE1lida recebida: \".concat(validDuration,\"s\"));setAudioDuration(validDuration);setMetadataLoaded(true);}else if(audioDuration>0){// Se já temos uma duração válida no estado, considerar os metadados como carregados\nsetMetadataLoaded(true);}},[duration,audioDuration]);// Validar duração para garantir valor numérico válido\nconst validateDuration=value=>{// Verificar se o valor é numérico e finito\nif(value===undefined||value===null||!isFinite(value)||isNaN(value)||value<=0){return 0;}return parseFloat(value);};// Tentar pré-carregar os metadados do áudio para obter a duração correta\nuseEffect(()=>{const loadAudioMetadata=async()=>{try{// Se já temos uma duração válida, não precisamos carregar os metadados\nif(audioDuration>0){setMetadataLoaded(true);return;}// Evitar tentativas infinitas\nif(loadAttempts.current>=3){console.warn('[WARN] Número máximo de tentativas de carregamento atingido');setMetadataLoaded(true);// Para não mostrar \"Carregando...\" infinitamente\nsetLoadingFailed(true);return;}loadAttempts.current+=1;const fullUrl=getFullUrl(audioUrl);console.log('[DEBUG] Pré-carregando metadados do áudio:',fullUrl);// Tentar métodos diferentes para obter a duração\ntry{// Usar Promise.race com diferentes estratégias\nconst result=await Promise.race([// Método 1: Carregamento direto via elemento Audio\ngetDurationFromAudioElement(fullUrl),// Método 2: Usando AudioContext (pode ser mais preciso para alguns formatos)\ngetDurationFromAudioContext(fullUrl),// Timeout para não ficar esperando para sempre\nnew Promise(resolve=>setTimeout(()=>resolve({success:false,reason:'timeout'}),5000))]);if(result.success&&result.duration){const validDuration=validateDuration(result.duration);if(validDuration>0){console.log('[DEBUG] Duração válida obtida:',validDuration);setAudioDuration(validDuration);setMetadataLoaded(true);}else{throw new Error(\"Duração obtida mas com valor inválido\");}}else{throw new Error(\"Falha ao obter duração: \"+(result.reason||\"desconhecida\"));}}catch(metadataError){console.warn('[WARN] Erro ao obter metadados:',metadataError);// Tentar o método tradicional como fallback\nconst tempAudio=new Audio();// Criar uma promise que resolve quando os metadados estiverem carregados\nawait new Promise((resolve,reject)=>{const onLoadedMetadata=()=>{// Verificar se a duração é válida\nconst validDuration=validateDuration(tempAudio.duration);if(validDuration>0){console.log('[DEBUG] Duração obtida no método tradicional:',validDuration);setAudioDuration(validDuration);setMetadataLoaded(true);resolve();}else{console.warn('[WARN] Duração inválida obtida no método tradicional:',tempAudio.duration);// Usar uma duração padrão razoável (30s) \nsetAudioDuration(30);setMetadataLoaded(true);resolve();}};const onError=error=>{console.error('[ERROR] Erro no método tradicional:',error);// Em caso de erro, usar um valor padrão razoável\nsetAudioDuration(30);setMetadataLoaded(true);setLoadingFailed(true);resolve();};// Timeout para não travar o processo\nconst timeout=setTimeout(()=>{console.warn('[WARN] Timeout no método tradicional');tempAudio.removeEventListener('loadedmetadata',onLoadedMetadata);tempAudio.removeEventListener('error',onError);setAudioDuration(30);setMetadataLoaded(true);setLoadingFailed(true);resolve();},3000);tempAudio.addEventListener('loadedmetadata',()=>{clearTimeout(timeout);onLoadedMetadata();});tempAudio.addEventListener('error',e=>{clearTimeout(timeout);onError(e);});tempAudio.preload='metadata';tempAudio.src=fullUrl;tempAudio.load();});}}catch(error){console.error('[ERROR] Exceção geral ao carregar áudio:',error);// Usar uma duração padrão para não deixar o usuário sem feedback\nsetAudioDuration(30);setMetadataLoaded(true);setLoadingFailed(true);}};if(audioUrl){loadAudioMetadata();}else{// Se não houver URL, marcar como carregado para não mostrar \"Carregando...\" infinitamente\nsetMetadataLoaded(true);}// Limpar intervalo quando componente desmontar\nreturn()=>{if(progressInterval.current){clearInterval(progressInterval.current);}if(audioRef.current){audioRef.current.pause();}};},[audioUrl,audioDuration]);// Implementar método para obter duração via elemento Audio\nconst getDurationFromAudioElement=url=>{return new Promise(resolve=>{const audio=new Audio();const onLoadedMetadata=()=>{const validDuration=validateDuration(audio.duration);if(validDuration>0){console.log(\"[DEBUG] Dura\\xE7\\xE3o via Audio element: \".concat(validDuration,\"s\"));resolve({success:true,duration:validDuration});}else{console.warn(\"[WARN] Audio element retornou dura\\xE7\\xE3o inv\\xE1lida: \".concat(audio.duration));resolve({success:false,reason:'invalid_duration'});}};const onCanPlayThrough=()=>{const validDuration=validateDuration(audio.duration);if(validDuration>0){console.log(\"[DEBUG] Dura\\xE7\\xE3o via canplaythrough: \".concat(validDuration,\"s\"));resolve({success:true,duration:validDuration});}};const onError=e=>{console.error(\"[ERROR] Erro ao carregar via Audio element:\",e);resolve({success:false,reason:'audio_error'});};// Configurar timeouts e listeners\nconst timeout=setTimeout(()=>{console.warn(\"[WARN] Timeout ao carregar via Audio element\");audio.removeEventListener('loadedmetadata',onLoadedMetadata);audio.removeEventListener('canplaythrough',onCanPlayThrough);audio.removeEventListener('error',onError);resolve({success:false,reason:'timeout'});},4000);audio.addEventListener('loadedmetadata',()=>{clearTimeout(timeout);onLoadedMetadata();});audio.addEventListener('canplaythrough',()=>{clearTimeout(timeout);onCanPlayThrough();});audio.addEventListener('error',e=>{clearTimeout(timeout);onError(e);});audio.preload='metadata';audio.src=url;audio.load();});};// Implementar método para obter duração via AudioContext\nconst getDurationFromAudioContext=url=>{return new Promise(resolve=>{try{// Verificar se o navegador suporta AudioContext\nif(!window.AudioContext&&!window.webkitAudioContext){return resolve({success:false,reason:'no_audio_context'});}const AudioCtx=window.AudioContext||window.webkitAudioContext;const context=new AudioCtx();const request=new XMLHttpRequest();request.open('GET',url,true);request.responseType='arraybuffer';request.onload=()=>{context.decodeAudioData(request.response,buffer=>{const duration=buffer.duration;const validDuration=validateDuration(duration);if(validDuration>0){console.log(\"[DEBUG] AudioContext obteve dura\\xE7\\xE3o: \".concat(validDuration,\"s\"));resolve({success:true,duration:validDuration});}else{console.warn(\"[WARN] AudioContext retornou dura\\xE7\\xE3o inv\\xE1lida: \".concat(duration));resolve({success:false,reason:'invalid_duration'});}context.close();},error=>{console.error('[ERROR] Erro ao decodificar via AudioContext:',error);resolve({success:false,reason:'decode_error'});context.close();});};request.onerror=error=>{console.error('[ERROR] Erro na requisição XHR para AudioContext:',error);resolve({success:false,reason:'xhr_error'});context.close();};// Timeout para não esperar indefinidamente\nsetTimeout(()=>{if(request.readyState!==4){request.abort();context.close();resolve({success:false,reason:'timeout'});}},4000);request.send();}catch(error){console.error('[ERROR] Exceção ao usar AudioContext:',error);resolve({success:false,reason:'context_exception'});}});};// Função para reprodução compativel com iOS\nconst togglePlayback=()=>{if(!audioRef.current){const fullUrl=getFullUrl(audioUrl);console.log(\"[DEBUG] Tentando reproduzir \\xE1udio de: \".concat(fullUrl));console.log(\"[DEBUG] Dispositivo iOS detectado: \".concat(isIOS));audioRef.current=new Audio();// Adicionar atributos para melhor compatibilidade com iOS\nif(isIOS){audioRef.current.setAttribute('playsinline','true');audioRef.current.setAttribute('webkit-playsinline','true');audioRef.current.setAttribute('preload','auto');}// Adicionar tratamento de eventos\naudioRef.current.addEventListener(\"loadedmetadata\",()=>{console.log(\"[DEBUG] Metadados carregados. Dura\\xE7\\xE3o: \".concat(audioRef.current.duration,\"s\"));const validDuration=validateDuration(audioRef.current.duration);if(validDuration>0){setAudioDuration(validDuration);setMetadataLoaded(true);}else{// Mesmo com duração inválida, marcar como carregado\nsetMetadataLoaded(true);}});audioRef.current.addEventListener(\"canplay\",()=>{console.log(\"[DEBUG] Audio pode ser reproduzido\");});audioRef.current.addEventListener(\"canplaythrough\",()=>{console.log(\"[DEBUG] Audio pode ser reproduzido sem pausas\");});audioRef.current.addEventListener(\"ended\",()=>{console.log('[DEBUG] Reprodução finalizada');setIsPlaying(false);setCurrentTime(0);clearInterval(progressInterval.current);});// Configurar o tratamento de erros para tentar URLs alternativas\naudioRef.current.addEventListener(\"error\",e=>{const errorCode=audioRef.current.error?audioRef.current.error.code:'Desconhecido';const errorMessage=audioRef.current.error?audioRef.current.error.message:'Erro desconhecido';console.error(\"[ERROR] Falha ao carregar \\xE1udio: Codigo \".concat(errorCode,\" - \").concat(errorMessage));console.error(\"[ERROR] URL que falhou: \".concat(audioRef.current.src));// Mensagem de erro para iOS\nif(isIOS){window.alert('Não foi possível reproduzir o áudio. Por favor, tente baixar o arquivo ou use outro dispositivo.');}else{window.alert('Não foi possível reproduzir o áudio. Verifique a conexão ou tente novamente mais tarde.');}setLoadingFailed(true);});// Configurar a URL do áudio\naudioRef.current.src=fullUrl;audioRef.current.load();}if(isPlaying){// Se já está tocando, pausar\naudioRef.current.pause();clearInterval(progressInterval.current);setIsPlaying(false);}else{// Para iOS: tente remover e recriar o elemento de áudio se necessário\nif(isIOS&&loadingFailed){// Tentar com um novo elemento de áudio\nif(audioRef.current){audioRef.current.pause();audioRef.current=null;}setLoadingFailed(false);return togglePlayback();// chamar recursivamente para criar novo elemento\n}// Se está pausado, tocar\nconst playPromise=audioRef.current.play();if(playPromise!==undefined){playPromise.then(()=>{console.log('[DEBUG] Reprodução iniciada com sucesso');setIsPlaying(true);progressInterval.current=setInterval(()=>{setCurrentTime(audioRef.current.currentTime);},100);}).catch(error=>{console.error(\"[ERROR] Erro ao iniciar reprodu\\xE7\\xE3o: \".concat(error.name,\" - \").concat(error.message));if(isIOS){// Tratamento especial para iOS\nif(error.name==='NotAllowedError'||error.name==='NotSupportedError'){window.alert('O iOS pode bloquear a reprodução automática de áudio. Toque na tela e tente novamente.');}else{window.alert('Não foi possível reproduzir o áudio. Verifique as configurações de som ou tente novamente.');}}else{window.alert('Não foi possível reproduzir o áudio. Verifique a conexão ou tente novamente mais tarde.');}setIsPlaying(false);setLoadingFailed(true);});}}};return/*#__PURE__*/React.createElement(Box,{className:classes.audioContainer,style:{alignSelf:isRight?\"flex-end\":\"flex-start\"}},/*#__PURE__*/React.createElement(\"div\",{className:classes.playerControls},/*#__PURE__*/React.createElement(IconButton,{className:classes.playButton,onClick:togglePlayback,disabled:loadingFailed,size:\"small\"},isPlaying?/*#__PURE__*/React.createElement(PauseIcon,{fontSize:\"small\"}):/*#__PURE__*/React.createElement(PlayArrowIcon,{fontSize:\"small\"})),/*#__PURE__*/React.createElement(\"div\",{className:classes.progressContainer},/*#__PURE__*/React.createElement(LinearProgress,{className:classes.progressBar,variant:\"determinate\",value:audioDuration>0?currentTime/audioDuration*100:0}),/*#__PURE__*/React.createElement(\"div\",{className:classes.timeInfo},/*#__PURE__*/React.createElement(Typography,{className:classes.timeText,variant:\"caption\"},formatTime(currentTime)),/*#__PURE__*/React.createElement(Typography,{className:classes.timeText,variant:\"caption\"},loadingFailed?\"Erro\":!metadataLoaded?\"Carregando...\":formatTime(audioDuration))))));}","map":null,"metadata":{},"sourceType":"module"}