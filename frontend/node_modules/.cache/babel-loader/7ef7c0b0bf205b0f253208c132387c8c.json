{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import{makeStyles}from\"@material-ui/core/styles\";import{Box,Typography,IconButton,Tooltip,Dialog,DialogContent,Link}from\"@material-ui/core\";import GetAppIcon from\"@material-ui/icons/GetApp\";import CloseIcon from\"@material-ui/icons/Close\";import ImageIcon from\"@material-ui/icons/Image\";import PictureAsPdfIcon from\"@material-ui/icons/PictureAsPdf\";import DescriptionIcon from\"@material-ui/icons/Description\";import MovieIcon from\"@material-ui/icons/Movie\";import InsertDriveFileIcon from\"@material-ui/icons/InsertDriveFile\";import VisibilityIcon from\"@material-ui/icons/Visibility\";import PlayCircleOutlineIcon from'@material-ui/icons/PlayCircleOutline';import PauseCircleOutlineIcon from'@material-ui/icons/PauseCircleOutline';import AudiotrackIcon from'@material-ui/icons/Audiotrack';import ChatAudioPlayer from\"./ChatAudioPlayer\";const useStyles=makeStyles(theme=>({fileContainer:{display:\"flex\",flexDirection:\"column\",gap:8,marginTop:8,marginBottom:8,maxWidth:280},fileItem:{display:\"flex\",alignItems:\"center\",padding:6,borderRadius:4,backgroundColor:theme.palette.background.default,border:\"1px solid rgba(0, 0, 0, 0.12)\",width:\"100%\"},audioFileItem:{padding:0,backgroundColor:\"transparent\",border:\"none\",borderRadius:8,overflow:\"hidden\"},fileIcon:{marginRight:8,fontSize:24},fileDetails:{flex:1,overflow:\"hidden\"},fileName:{fontSize:12,fontWeight:500,textOverflow:\"ellipsis\",overflow:\"hidden\",whiteSpace:\"nowrap\"},fileSize:{fontSize:10,color:theme.palette.text.secondary},fileActions:{display:\"flex\",gap:4},actionButton:{padding:4},previewImage:{maxWidth:\"100%\",maxHeight:\"80vh\",objectFit:\"contain\"},previewVideo:{maxWidth:\"100%\",maxHeight:\"80vh\"},previewPdf:{width:\"100%\",height:\"80vh\"},previewDialog:{\"& .MuiDialog-paper\":{position:\"relative\"}},closeButton:{position:\"absolute\",right:8,top:8,color:theme.palette.grey[500],zIndex:2,backgroundColor:\"rgba(255,255,255,0.7)\",\"&:hover\":{backgroundColor:\"rgba(255,255,255,0.9)\"}},thumbnailImage:{width:40,height:40,objectFit:\"cover\",borderRadius:4,marginRight:8},audioPlayButton:{padding:4}}));// Função para formatar o tamanho do arquivo em KB ou MB\nconst formatFileSize=bytes=>{if(!bytes)return\"0 B\";if(bytes<1024){return bytes+\" B\";}else if(bytes<1024*1024){return(bytes/1024).toFixed(1)+\" KB\";}else{return(bytes/(1024*1024)).toFixed(1)+\" MB\";}};// Função para obter o ícone correto de acordo com o tipo de arquivo\nconst getFileIcon=fileName=>{if(!fileName)return/*#__PURE__*/React.createElement(InsertDriveFileIcon,null);const extension=fileName.split('.').pop().toLowerCase();if(['jpg','jpeg','png','gif'].includes(extension)){return/*#__PURE__*/React.createElement(ImageIcon,{color:\"primary\"});}else if(extension==='pdf'){return/*#__PURE__*/React.createElement(PictureAsPdfIcon,{color:\"error\"});}else if(['doc','docx'].includes(extension)){return/*#__PURE__*/React.createElement(DescriptionIcon,{color:\"primary\"});}else if(['mp4','avi','mov'].includes(extension)){return/*#__PURE__*/React.createElement(MovieIcon,{color:\"secondary\"});}else if(['mp3','wav','ogg','opus'].includes(extension)){return/*#__PURE__*/React.createElement(AudiotrackIcon,{color:\"primary\"});}else{return/*#__PURE__*/React.createElement(InsertDriveFileIcon,{color:\"action\"});}};// Função para verificar se o arquivo é visualizável\nconst isPreviewable=fileName=>{if(!fileName)return false;const extension=fileName.split('.').pop().toLowerCase();return['jpg','jpeg','png','gif','pdf','mp4','mp3','wav','ogg','opus','m4a'].includes(extension);};// Função para verificar se o arquivo é de áudio\nconst isAudioFile=fileName=>{if(!fileName)return false;const extension=fileName.split('.').pop().toLowerCase();return['mp3','wav','ogg','opus','m4a'].includes(extension);};// Função para obter a URL completa do arquivo\nconst getFullUrl=url=>{if(!url)return\"\";// Se a URL já começa com http ou https, retornar como está\nif(url.startsWith('http://')||url.startsWith('https://')){return url;}// Se a URL é relativa, adicionar o endereço do backend\nconst BACKEND_URL=process.env.REACT_APP_BACKEND_URL||window.location.origin;// Se começa com '/', removemos a barra para evitar duplicação\nconst cleanUrl=url.startsWith('/')?url.substring(1):url;// Verificar se já contém o prefixo public/ antes de adicioná-lo\nconst urlWithPublic=cleanUrl.startsWith('public/')?cleanUrl:\"public/\".concat(cleanUrl);const fullUrl=\"\".concat(BACKEND_URL,\"/\").concat(urlWithPublic);return fullUrl;};export default function ChatFileMessage(_ref){let{files,isRight}=_ref;const classes=useStyles();const[previewOpen,setPreviewOpen]=useState(false);const[selectedFile,setSelectedFile]=useState(null);const[isAudioPlaying,setIsAudioPlaying]=useState(false);const audioRef=useRef(null);const[audioDurations,setAudioDurations]=useState({});useEffect(()=>{if(audioRef.current){audioRef.current.onended=()=>{setIsAudioPlaying(false);};}if(files&&files.length>0){const processAudioFiles=async()=>{const durations={...audioDurations};let hasNewDurations=false;for(const file of files){var _file$name;const fileExt=(_file$name=file.name)===null||_file$name===void 0?void 0:_file$name.split('.').pop().toLowerCase();const isAudio=['mp3','wav','ogg','opus','m4a'].includes(fileExt);if(isAudio){// Skip files that already have durations\nif(audioDurations[file.id]&&audioDurations[file.id]>0){continue;}// Tentar método alternativo para obter duração do áudio\ntry{const fullUrl=getFullUrl(file.url);// Criar dois métodos paralelos para obter a duração e usar o que responder primeiro com valor válido\nconst durationPromise1=getDurationFromAudioElement(fullUrl);const durationPromise2=getDurationFromAudioContext(fullUrl);// Tentar também obter a duração dos metadados diretos do arquivo\nlet metadataDuration=null;if(file.metadata&&file.metadata.duration&&!isNaN(file.metadata.duration)&&isFinite(file.metadata.duration)&&file.metadata.duration>0){metadataDuration=file.metadata.duration;}// Próxima fonte: arquivo tem propriedade duration direta\nif(!metadataDuration&&file.duration&&!isNaN(file.duration)&&isFinite(file.duration)&&file.duration>0){metadataDuration=file.duration;}// Usar Promise.race para pegar o primeiro resultado válido\nconst result=await Promise.race([durationPromise1,durationPromise2,// Se já temos uma duração dos metadados, transformá-la em uma promise resolvida imediatamente\nmetadataDuration?Promise.resolve({success:true,duration:metadataDuration}):new Promise(resolve=>setTimeout(()=>resolve({success:false}),5000))]);if(result.success&&result.duration){// Garantir que a duração é um número válido\nconst validDuration=parseFloat(result.duration);if(!isNaN(validDuration)&&isFinite(validDuration)&&validDuration>0){durations[file.id]=validDuration;hasNewDurations=true;}else{// Se ainda obtivemos um valor inválido, usar duração padrão\ndurations[file.id]=30;hasNewDurations=true;}}else{// Se todas as estratégias falharam, usar um valor padrão realista\ndurations[file.id]=30;hasNewDurations=true;}}catch(error){// Usar duração padrão em caso de erro\ndurations[file.id]=30;hasNewDurations=true;}}}// Atualizar o estado com todas as durações processadas\n// Só atualiza se existirem novas durações para evitar loop\nif(hasNewDurations){setAudioDurations(durations);}};// Executar o processamento de áudios\nprocessAudioFiles();}},[files]);// Função auxiliar para obter duração usando elemento Audio\nconst getDurationFromAudioElement=url=>{return new Promise(resolve=>{const audio=new Audio();const onLoadedMetadata=()=>{if(!isNaN(audio.duration)&&isFinite(audio.duration)&&audio.duration>0){resolve({success:true,duration:audio.duration});}else{resolve({success:false});}};const onCanPlayThrough=()=>{if(!isNaN(audio.duration)&&isFinite(audio.duration)&&audio.duration>0){resolve({success:true,duration:audio.duration});}};const onError=e=>{resolve({success:false});};// Configurar os event listeners\naudio.addEventListener('loadedmetadata',onLoadedMetadata);audio.addEventListener('canplaythrough',onCanPlayThrough);audio.addEventListener('error',onError);// Timeout para não esperar infinitamente\nsetTimeout(()=>{audio.removeEventListener('loadedmetadata',onLoadedMetadata);audio.removeEventListener('canplaythrough',onCanPlayThrough);audio.removeEventListener('error',onError);resolve({success:false,timeout:true});},5000);// Configuração e carregamento\naudio.preload='metadata';audio.src=url;audio.load();});};// Função auxiliar para obter duração usando AudioContext (método alternativo)\nconst getDurationFromAudioContext=url=>{return new Promise(resolve=>{try{// Verificar se o navegador suporta AudioContext\nif(!window.AudioContext&&!window.webkitAudioContext){return resolve({success:false,reason:'AudioContext não suportado'});}const AudioCtx=window.AudioContext||window.webkitAudioContext;const audioContext=new AudioCtx();// Fazer uma solicitação XHR para obter os dados binários do áudio\nconst request=new XMLHttpRequest();request.open('GET',url,true);request.responseType='arraybuffer';request.onload=()=>{// Decodificar os dados de áudio para obter a duração\naudioContext.decodeAudioData(request.response,buffer=>{const duration=buffer.duration;if(!isNaN(duration)&&isFinite(duration)&&duration>0){resolve({success:true,duration:duration});}else{resolve({success:false});}audioContext.close();},error=>{resolve({success:false});audioContext.close();});};request.onerror=error=>{resolve({success:false});audioContext.close();};// Timeout para não esperar infinitamente\nsetTimeout(()=>{if(request.readyState!==4){request.abort();audioContext.close();resolve({success:false,timeout:true});}},5000);request.send();}catch(error){resolve({success:false,error});}});};if(!files||files.length===0)return null;const handlePreview=file=>{setSelectedFile(file);setPreviewOpen(true);};const handleClosePreview=()=>{setPreviewOpen(false);setIsAudioPlaying(false);if(audioRef.current){audioRef.current.pause();}};const toggleAudioPlayback=(file,event)=>{event.stopPropagation();if(!audioRef.current)return;if(isAudioPlaying){audioRef.current.pause();}else{audioRef.current.src=getFullUrl(file.url);audioRef.current.play();}setIsAudioPlaying(!isAudioPlaying);};const renderPreview=()=>{var _selectedFile$name;if(!selectedFile)return null;const fileExt=(_selectedFile$name=selectedFile.name)===null||_selectedFile$name===void 0?void 0:_selectedFile$name.split('.').pop().toLowerCase();const fileUrl=getFullUrl(selectedFile.url);if(['jpg','jpeg','png','gif'].includes(fileExt)){return/*#__PURE__*/React.createElement(\"img\",{src:fileUrl,alt:selectedFile.name,style:{maxWidth:'100%',maxHeight:'calc(80vh - 64px)'},onError:e=>{e.target.onerror=null;e.target.src=\"\".concat(process.env.PUBLIC_URL,\"/nopicture.png\");}});}else if(fileExt==='pdf'){return/*#__PURE__*/React.createElement(\"iframe\",{src:\"\".concat(fileUrl,\"#view=FitH\"),title:selectedFile.name,width:\"100%\",height:\"80vh\",style:{border:'none'}});}else if(['mp4','avi','mov'].includes(fileExt)){return/*#__PURE__*/React.createElement(\"video\",{src:fileUrl,controls:true,autoPlay:true,style:{maxWidth:'100%',maxHeight:'calc(80vh - 64px)'}});}else if(['mp3','wav','ogg','opus','m4a'].includes(fileExt)){return/*#__PURE__*/React.createElement(\"div\",{style:{width:'100%',padding:'20px',textAlign:'center'}},/*#__PURE__*/React.createElement(AudiotrackIcon,{style:{fontSize:60,color:'#3f51b5',marginBottom:20}}),/*#__PURE__*/React.createElement(Typography,{variant:\"h6\",style:{marginBottom:20}},selectedFile.name),/*#__PURE__*/React.createElement(\"audio\",{ref:audioRef,src:fileUrl,controls:true,style:{width:'100%'},onError:e=>{if(fileUrl.includes('/public/')){const BACKEND_URL=process.env.REACT_APP_BACKEND_URL||window.location.origin;const originalUrl=selectedFile.url;const alternativeUrl=\"\".concat(BACKEND_URL,\"/\").concat(originalUrl.startsWith('/')?originalUrl.substring(1):originalUrl);e.target.src=alternativeUrl;e.target.load();}}}));}else{return/*#__PURE__*/React.createElement(Typography,{variant:\"body1\",style:{padding:20,textAlign:'center'}},\"Este tipo de arquivo n\\xE3o pode ser visualizado diretamente.\",/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(Link,{href:fileUrl,target:\"_blank\",download:true},\"Clique aqui para baixar\"));}};const renderFileItems=()=>{return files.map((file,index)=>{var _file$name2;const fileExt=(_file$name2=file.name)===null||_file$name2===void 0?void 0:_file$name2.split('.').pop().toLowerCase();const isAudio=['mp3','wav','ogg','opus','m4a'].includes(fileExt);if(isAudio){// Obter a duração do estado ou usar valor padrão\nlet audioDuration=audioDurations[file.id]||0;return/*#__PURE__*/React.createElement(Box,{key:index,className:\"\".concat(classes.fileItem,\" \").concat(classes.audioFileItem)},/*#__PURE__*/React.createElement(ChatAudioPlayer,{audioUrl:file.url,duration:audioDuration,isRight:isRight}));}return/*#__PURE__*/React.createElement(Box,{key:index,className:classes.fileItem},['jpg','jpeg','png','gif'].includes(fileExt)?/*#__PURE__*/React.createElement(\"img\",{src:getFullUrl(file.url),alt:file.name,className:classes.thumbnailImage,onError:e=>{e.target.onerror=null;e.target.src=\"\".concat(process.env.PUBLIC_URL,\"/nopicture.png\");}}):getFileIcon(file.name),/*#__PURE__*/React.createElement(Box,{className:classes.fileDetails},/*#__PURE__*/React.createElement(Typography,{className:classes.fileName},file.name),/*#__PURE__*/React.createElement(Typography,{className:classes.fileSize},formatFileSize(file.size))),/*#__PURE__*/React.createElement(Box,{className:classes.fileActions},isPreviewable(file.name)&&/*#__PURE__*/React.createElement(Tooltip,{title:\"Visualizar\"},/*#__PURE__*/React.createElement(IconButton,{className:classes.actionButton,onClick:()=>handlePreview(file)},/*#__PURE__*/React.createElement(VisibilityIcon,{fontSize:\"small\"}))),/*#__PURE__*/React.createElement(Tooltip,{title:\"Baixar\"},/*#__PURE__*/React.createElement(IconButton,{className:classes.actionButton,component:Link,href:getFullUrl(file.url),download:file.name,target:\"_blank\"},/*#__PURE__*/React.createElement(GetAppIcon,{fontSize:\"small\"})))));});};return/*#__PURE__*/React.createElement(Box,{className:classes.fileContainer},renderFileItems(),/*#__PURE__*/React.createElement(Dialog,{open:previewOpen,onClose:handleClosePreview,maxWidth:\"lg\",className:classes.previewDialog},/*#__PURE__*/React.createElement(IconButton,{className:classes.closeButton,onClick:handleClosePreview},/*#__PURE__*/React.createElement(CloseIcon,null)),/*#__PURE__*/React.createElement(DialogContent,{style:{padding:16}},renderPreview()),/*#__PURE__*/React.createElement(\"audio\",{ref:audioRef,style:{display:'none'}})));}","map":null,"metadata":{},"sourceType":"module"}