{"ast":null,"code":"import React,{useContext,useEffect,useRef,useState}from\"react\";import{Box,FormControl,IconButton,Input,InputAdornment,makeStyles,Paper,Typography,CircularProgress,LinearProgress}from\"@material-ui/core\";import SendIcon from\"@material-ui/icons/Send\";import{AuthContext}from\"../../context/Auth/AuthContext\";import{useDate}from\"../../hooks/useDate\";import api from\"../../services/api\";import ChatFilePreview from\"./ChatFilePreview\";import ChatFileMessage from\"./ChatFileMessage\";import ChatFileUpload from\"./ChatFileUpload\";import ChatAudioRecorder from\"./ChatAudioRecorder\";import ChatAudioPlayer from\"./ChatAudioPlayer\";const useStyles=makeStyles(theme=>({mainContainer:{display:\"flex\",flexDirection:\"column\",position:\"relative\",flex:1,overflow:\"hidden\",borderRadius:0,height:\"100%\",borderLeft:\"1px solid rgba(0, 0, 0, 0.12)\"},messageList:{position:\"relative\",overflowY:\"auto\",height:\"100%\",...theme.scrollbarStyles,backgroundColor:theme.mode==='light'?\"#f2f2f2\":\"#7f7f7f\"},inputArea:{position:\"relative\",height:\"auto\"},input:{padding:\"20px\"},buttonSend:{margin:theme.spacing(1)},uploadInput:{display:\"none\"},buttonAttach:{margin:theme.spacing(1)},previewArea:{padding:\"10px 15px\",display:\"flex\",flexWrap:\"wrap\",gap:8,background:theme.palette.background.default,borderTop:\"1px solid rgba(0, 0, 0, 0.12)\"},uploadProgress:{width:\"100%\",marginTop:5},boxLeft:{padding:\"10px 10px 5px\",margin:\"10px\",position:\"relative\",backgroundColor:\"#ffffff\",color:\"#303030\",maxWidth:300,borderRadius:10,borderBottomLeftRadius:0,border:\"1px solid rgba(0, 0, 0, 0.12)\"},boxRight:{padding:\"10px 10px 5px\",margin:\"10px 10px 10px auto\",position:\"relative\",backgroundColor:\"#dcf8c6\",color:\"#303030\",textAlign:\"right\",maxWidth:300,borderRadius:10,borderBottomRightRadius:0,border:\"1px solid rgba(0, 0, 0, 0.12)\"},messageListLoading:{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",height:\"100%\"},messageListEmpty:{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",height:\"100%\"},timestamp:{marginLeft:theme.spacing(1)}}));export default function ChatMessages(_ref){let{chat,messages,handleSendMessage,handleLoadMore,scrollToBottomRef,pageInfo,loading}=_ref;const classes=useStyles();const{user,socket}=useContext(AuthContext);const{datetimeToClient}=useDate();const baseRef=useRef();const[contentMessage,setContentMessage]=useState(\"\");const[selectedFiles,setSelectedFiles]=useState([]);const[uploadProgress,setUploadProgress]=useState(0);const[isUploading,setIsUploading]=useState(false);const scrollToBottom=()=>{if(baseRef.current){baseRef.current.scrollIntoView({});}};const unreadMessages=chat=>{if(chat!==undefined){const currentUser=chat.users.find(u=>u.userId===user.id);return currentUser.unreads>0;}return 0;};useEffect(()=>{if(unreadMessages(chat)>0){try{api.post(\"/chats/\".concat(chat.id,\"/read\"),{userId:user.id});}catch(err){}}scrollToBottomRef.current=scrollToBottom;// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);const handleScroll=e=>{const{scrollTop}=e.currentTarget;if(!pageInfo.hasMore||loading)return;if(scrollTop<600){handleLoadMore();}};const handleSend=async()=>{if(contentMessage.trim()===\"\"&&selectedFiles.length===0)return;if(selectedFiles.length>0){setIsUploading(true);const formData=new FormData();selectedFiles.forEach(file=>{formData.append(\"files\",file);});if(contentMessage.trim()!==\"\"){formData.append(\"message\",contentMessage);}try{await api.post(\"/chats/\".concat(chat.id,\"/messages/upload\"),formData,{onUploadProgress:progressEvent=>{const percentCompleted=Math.round(progressEvent.loaded*100/progressEvent.total);setUploadProgress(percentCompleted);}});setSelectedFiles([]);setContentMessage(\"\");setUploadProgress(0);}catch(err){console.error(err);window.alert(\"Erro ao enviar arquivos. Tente novamente.\");}finally{setIsUploading(false);}}else if(contentMessage.trim()!==\"\"){handleSendMessage(contentMessage);setContentMessage(\"\");}};const handleFilesSelected=(files,progressCallback,completeCallback)=>{// Verificar se recebemos arquivos válidos\nif(!files||Array.isArray(files)&&files.length===0){console.error(\"[ERROR] Nenhum arquivo recebido para upload\");if(completeCallback)completeCallback();return;}const formData=new FormData();// Se for um único arquivo (caso do áudio) ou uma lista de arquivos\nif(files instanceof File){console.log(\"[DEBUG] Adicionando arquivo único ao FormData:\",files.name,files.size,files.type);// Verificar se o arquivo tem tamanho válido\nif(files.size===0){console.error(\"[ERROR] Arquivo com tamanho zero:\",files.name);window.alert(\"O arquivo de áudio está vazio. Tente gravar novamente com um microfone diferente.\");if(completeCallback)completeCallback();return;}// Para arquivos de áudio, verificar codec e converter se necessário\nif(files.type.startsWith('audio/')){console.log(\"[DEBUG] Processando arquivo de áudio\");// Registrar informações sobre o arquivo para diagnóstico\nconsole.log(\"[DEBUG] Detalhes do arquivo de \\xE1udio original:\",{nome:files.name,tamanho:files.size,tipo:files.type,ultimaModificacao:files.lastModified});try{// Determinar a extensão correta com base no tipo MIME\nlet audioExt='mp3';// Padrão para compatibilidade máxima\nif(files.type==='audio/webm'){audioExt='webm';}else if(files.type==='audio/mp3'||files.type==='audio/mpeg'){audioExt='mp3';}else if(files.type==='audio/ogg'){audioExt='ogg';}// Criar uma cópia do arquivo com nome garantido e verificar o tamanho novamente\nconst newFileName=\"audio_\".concat(Date.now(),\".\").concat(audioExt);// Ler o arquivo como ArrayBuffer para garantir que os dados estão intactos\nconst reader=new FileReader();// Usar uma Promise para trabalhar com o FileReader de forma assíncrona\nconst processAudioFile=new Promise((resolve,reject)=>{reader.onload=function(e){try{if(!e.target.result||e.target.result.byteLength===0){console.error(\"[ERROR] FileReader não leu dados do arquivo\");reject(new Error(\"Não foi possível ler os dados do arquivo de áudio\"));return;}console.log(\"[DEBUG] Arquivo lido como ArrayBuffer: \".concat(e.target.result.byteLength,\" bytes\"));// Criar blob a partir do ArrayBuffer\nconst audioBlob=new Blob([e.target.result],{type:files.type});if(audioBlob.size===0){console.error(\"[ERROR] Blob criado tem tamanho zero\");reject(new Error(\"Falha ao processar dados do áudio\"));return;}console.log(\"[DEBUG] Blob criado com tamanho: \".concat(audioBlob.size,\" bytes\"));// Criar arquivo a partir do blob\nconst audioFile=new File([audioBlob],newFileName,{type:files.type,lastModified:Date.now()});console.log(\"[DEBUG] Arquivo final criado: \".concat(audioFile.name,\", tamanho: \").concat(audioFile.size,\", tipo: \").concat(audioFile.type));resolve(audioFile);}catch(error){console.error(\"[ERROR] Erro ao processar dados do áudio:\",error);reject(error);}};reader.onerror=function(){console.error(\"[ERROR] FileReader encontrou um erro ao ler o arquivo\");reject(new Error(\"Erro ao ler o arquivo de áudio\"));};// Iniciar a leitura do arquivo\nreader.readAsArrayBuffer(files);});// Processar o arquivo e depois enviar para o servidor\nprocessAudioFile.then(audioFile=>{// Verificação final\nif(audioFile.size===0){console.error(\"[ERROR] Arquivo de áudio processado tem tamanho zero\");window.alert(\"Erro ao processar o áudio. Tente novamente.\");if(completeCallback)completeCallback();return;}// Adiciona o arquivo ao FormData e envia\nconst audioFormData=new FormData();audioFormData.append(\"files\",audioFile);if(contentMessage.trim()!==\"\"){audioFormData.append(\"message\",contentMessage);}console.log(\"[DEBUG] Enviando áudio para o servidor\");api.post(\"/chats/\".concat(chat.id,\"/messages/upload\"),audioFormData,{headers:{'Content-Type':'multipart/form-data'},onUploadProgress:progressEvent=>{const percentCompleted=Math.round(progressEvent.loaded*100/progressEvent.total);console.log(\"[DEBUG] Progresso do upload de \\xE1udio: \".concat(percentCompleted,\"%\"));if(progressCallback)progressCallback(percentCompleted);}}).then(response=>{console.log(\"[DEBUG] Upload de áudio bem-sucedido:\",response.data);setContentMessage(\"\");if(completeCallback)completeCallback();}).catch(err=>{console.error(\"[ERROR] Falha no upload de áudio:\",err.message);window.alert(\"Erro ao enviar o áudio. Tente novamente.\");if(completeCallback)completeCallback();});}).catch(error=>{console.error(\"[ERROR] Falha ao processar o arquivo de áudio:\",error);window.alert(\"Não foi possível processar o arquivo de áudio. Tente novamente.\");if(completeCallback)completeCallback();});// Retorna aqui pois o envio será tratado pela Promise\nreturn;}catch(error){console.error(\"[ERROR] Exceção ao processar áudio:\",error);window.alert(\"Erro ao processar o áudio. Tente novamente.\");if(completeCallback)completeCallback();return;}}else{formData.append(\"files\",files);}}else{console.log(\"[DEBUG] Adicionando múltiplos arquivos ao FormData:\",Array.from(files).length);let validFilesCount=0;Array.from(files).forEach(file=>{// Verificar se o arquivo tem tamanho válido\nif(file.size===0){console.error(\"[ERROR] Arquivo com tamanho zero:\",file.name);return;// Pular este arquivo\n}console.log(\"[DEBUG] Arquivo:\",file.name,file.size,file.type);formData.append(\"files\",file);validFilesCount++;});if(validFilesCount===0){console.error(\"[ERROR] Nenhum arquivo válido para enviar\");window.alert(\"Nenhum arquivo válido para enviar. Verifique se os arquivos selecionados não estão vazios.\");if(completeCallback)completeCallback();return;}}// Adicionar mensagem de texto se houver\nif(contentMessage.trim()!==\"\"){formData.append(\"message\",contentMessage);}console.log(\"[DEBUG] Enviando upload para:\",\"/chats/\".concat(chat.id,\"/messages/upload\"));console.log(\"[DEBUG] Chat ID:\",chat.id);// Verificação detalhada do FormData antes do envio\nconst filesInFormData=formData.getAll(\"files\");console.log(\"[DEBUG] FormData contém files:\",filesInFormData.length);filesInFormData.forEach((file,index)=>{console.log(\"[DEBUG] FormData file \".concat(index,\":\"),file.name,file.size,file.type);});// Verificar se temos arquivos no FormData antes de enviar\nif(filesInFormData.length===0){console.error(\"[ERROR] FormData não contém arquivos\");window.alert(\"Erro: Não foi possível preparar o arquivo para upload\");if(completeCallback)completeCallback();return;}// Verificar tamanho dos arquivos\nconst hasInvalidFiles=filesInFormData.some(file=>file.size===0);if(hasInvalidFiles){console.error(\"[ERROR] Alguns arquivos têm tamanho zero\");if(!window.confirm(\"Alguns arquivos parecem estar vazios. Deseja continuar mesmo assim?\")){if(completeCallback)completeCallback();return;}}console.log(\"[DEBUG API] Enviando FormData para:\",\"/chats/\".concat(chat.id,\"/messages/upload\"));api.post(\"/chats/\".concat(chat.id,\"/messages/upload\"),formData,{headers:{'Content-Type':'multipart/form-data'},onUploadProgress:progressEvent=>{const percentCompleted=Math.round(progressEvent.loaded*100/progressEvent.total);console.log(\"[DEBUG] Progresso do upload: \".concat(percentCompleted,\"%\"));if(progressCallback)progressCallback(percentCompleted);}}).then(response=>{console.log(\"[DEBUG] Upload bem-sucedido:\",response.data);setContentMessage(\"\");if(completeCallback)completeCallback();}).catch(err=>{var _err$response,_err$response2,_err$response3,_err$response4,_err$response5;console.error(\"[ERROR] Falha no upload:\",err.message);console.error(\"[ERROR] Status:\",(_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.status);console.error(\"[ERROR] Dados:\",(_err$response2=err.response)===null||_err$response2===void 0?void 0:_err$response2.data);// Mensagem mais específica com base no tipo de erro\nlet errorMessage=\"Erro ao enviar arquivos. Tente novamente.\";if(((_err$response3=err.response)===null||_err$response3===void 0?void 0:_err$response3.status)===400){errorMessage=\"Erro: O servidor não recebeu os arquivos corretamente. Tente novamente.\";}else if(((_err$response4=err.response)===null||_err$response4===void 0?void 0:_err$response4.status)===413){errorMessage=\"Erro: O arquivo é muito grande para upload. Tente um arquivo menor.\";}else if(((_err$response5=err.response)===null||_err$response5===void 0?void 0:_err$response5.status)>=500){errorMessage=\"Erro no servidor. Por favor, tente novamente mais tarde.\";}window.alert(errorMessage);if(completeCallback)completeCallback();});};const renderMessageContent=message=>{// Verificar se a mensagem tem arquivos\nif(message.files&&message.files.length>0){// Verificar se há arquivos de áudio\nconst audioFiles=message.files.filter(file=>{var _file$name;const extension=(_file$name=file.name)===null||_file$name===void 0?void 0:_file$name.split('.').pop().toLowerCase();return['mp3','wav','ogg','opus'].includes(extension);});// Se for apenas áudio, renderizar o player sem exibir a mensagem de texto\nif(audioFiles.length>0&&audioFiles.length===message.files.length&&!message.message){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(ChatFileMessage,{files:message.files,isRight:message.senderId===user.id}));}}// Renderização padrão para mensagens normais ou mistas\nreturn/*#__PURE__*/React.createElement(React.Fragment,null,message.message&&/*#__PURE__*/React.createElement(Typography,{style:{wordBreak:\"break-word\"}},message.message),message.files&&message.files.length>0&&/*#__PURE__*/React.createElement(ChatFileMessage,{files:message.files,isRight:message.senderId===user.id}));};const renderMessages=()=>{if(loading&&messages.length===0){return/*#__PURE__*/React.createElement(\"div\",{className:classes.messageListLoading},/*#__PURE__*/React.createElement(CircularProgress,null));}if(messages.length===0){return/*#__PURE__*/React.createElement(\"div\",{className:classes.messageListEmpty},/*#__PURE__*/React.createElement(Typography,{variant:\"body1\"},\"Nenhuma mensagem encontrada.\"));}// Log para monitorar mensagens de áudio recebidas do servidor (manter essa funcionalidade)\nmessages.forEach(message=>{if(message.files&&message.files.length>0){message.files.forEach(file=>{const extension=file.name.split('.').pop().toLowerCase();const isAudio=['mp3','wav','ogg','webm','opus'].includes(extension);if(isAudio){console.log('[DEBUG] Arquivo de áudio recebido:',{name:file.name,url:file.url,metadata:file.metadata});}});}});// Renderizar cada mensagem individualmente (sem agrupamento)\nreturn messages.map(message=>{var _message$sender;const messageDate=datetimeToClient(message.createdAt);// Verificar se a mensagem é do usuário atual de várias maneiras possíveis\nconst isMe=message.fromMe===true||message.senderId===user.id||((_message$sender=message.sender)===null||_message$sender===void 0?void 0:_message$sender.id)===user.id;// Determinar o nome do remetente com fallbacks\nconst senderName=(()=>{// Se tiver um objeto sender, usar o nome dele\nif(message.sender&&message.sender.name){return message.sender.name;}// Se tiver propriedade senderName, usar ela\nif(message.senderName){return message.senderName;}// Se tiver propriedade username, usar ela\nif(message.username){return message.username;}// Se tivermos o objeto chat e o id do remetente\nif(chat&&chat.users&&message.senderId){const chatUser=chat.users.find(u=>u.userId===message.senderId||u.id===message.senderId);if(chatUser){return chatUser.name||\"Usuário\";}}// Fallback final\nreturn\"Usuário\";})();// Debug da estrutura da mensagem e dados do remetente\nconsole.log('[DEBUG] Mensagem:',{id:message.id,senderId:message.senderId,fromMe:message.fromMe,sender:message.sender,isMe:isMe,currentUserId:user.id,determinedSenderName:senderName});return/*#__PURE__*/React.createElement(\"div\",{key:message.id,className:isMe?classes.boxRight:classes.boxLeft},!isMe&&/*#__PURE__*/React.createElement(Typography,{variant:\"caption\",style:{fontWeight:'bold',display:'block',marginBottom:4}},senderName),renderMessageContent(message),/*#__PURE__*/React.createElement(Typography,{variant:\"caption\",className:classes.timestamp},messageDate));});};return/*#__PURE__*/React.createElement(Paper,{className:classes.mainContainer},/*#__PURE__*/React.createElement(\"div\",{onScroll:handleScroll,className:classes.messageList},renderMessages(),/*#__PURE__*/React.createElement(\"div\",{ref:baseRef})),selectedFiles.length>0&&/*#__PURE__*/React.createElement(\"div\",{className:classes.previewArea},/*#__PURE__*/React.createElement(ChatFilePreview,{files:selectedFiles,onRemove:index=>setSelectedFiles(prev=>prev.filter((_,i)=>i!==index))}),isUploading&&/*#__PURE__*/React.createElement(LinearProgress,{className:classes.uploadProgress,variant:\"determinate\",value:uploadProgress})),/*#__PURE__*/React.createElement(\"div\",{className:classes.inputArea},/*#__PURE__*/React.createElement(FormControl,{variant:\"outlined\",fullWidth:true},/*#__PURE__*/React.createElement(Input,{multiline:true,disabled:isUploading,value:contentMessage,onKeyUp:e=>{if(e.key===\"Enter\"&&!e.shiftKey&&!isUploading){e.preventDefault();handleSend();}},onChange:e=>setContentMessage(e.target.value),className:classes.input,endAdornment:/*#__PURE__*/React.createElement(InputAdornment,{position:\"end\"},/*#__PURE__*/React.createElement(ChatFileUpload,{disabled:isUploading,onFilesSelected:handleFilesSelected}),/*#__PURE__*/React.createElement(ChatAudioRecorder,{disabled:isUploading,onAudioRecorded:handleFilesSelected}),/*#__PURE__*/React.createElement(IconButton,{onClick:handleSend,disabled:isUploading||contentMessage.trim()===\"\"&&selectedFiles.length===0,className:classes.buttonSend},isUploading?/*#__PURE__*/React.createElement(CircularProgress,{size:24}):/*#__PURE__*/React.createElement(SendIcon,null)))}))));}","map":null,"metadata":{},"sourceType":"module"}