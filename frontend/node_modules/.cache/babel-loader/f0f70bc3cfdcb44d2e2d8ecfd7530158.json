{"ast":null,"code":"import React,{useContext,useEffect,useRef,useState}from\"react\";import{useParams,useHistory}from\"react-router-dom\";import{Button,Dialog,DialogActions,DialogContent,DialogTitle,Grid,makeStyles,Paper,Tab,Tabs,TextField,Typography}from\"@material-ui/core\";import ChatList from\"./ChatList\";import ChatMessages from\"./ChatMessages\";import{UsersFilter}from\"../../components/UsersFilter\";import api from\"../../services/api\";// import { SocketContext } from \"../../context/Socket/SocketContext\";\nimport{has,isObject}from\"lodash\";import{AuthContext}from\"../../context/Auth/AuthContext\";import withWidth,{isWidthUp}from\"@material-ui/core/withWidth\";import{i18n}from\"../../translate/i18n\";const useStyles=makeStyles(theme=>({mainContainer:{display:\"flex\",flexDirection:\"column\",position:\"relative\",flex:1,padding:theme.spacing(2),height:\"calc(100% - 48px)\",overflowY:\"hidden\",border:\"1px solid rgba(0, 0, 0, 0.12)\"},gridContainer:{flex:1,height:\"100%\",border:\"1px solid rgba(0, 0, 0, 0.12)\",background:theme.palette.background.color},gridItem:{height:\"100%\"},gridItemTab:{height:\"92%\",width:\"100%\"},btnContainer:{textAlign:\"right\",padding:10}}));export function ChatModal(_ref){let{open,chat,type,handleClose,handleLoadNewChat,handleUpdateChat}=_ref;const[users,setUsers]=useState([]);const[title,setTitle]=useState(\"\");const{user}=useContext(AuthContext);const[loading,setLoading]=useState(false);const[error,setError]=useState(\"\");useEffect(()=>{// Limpar erro ao abrir/fechar o modal\nsetError(\"\");// Resetar estados\nsetTitle(\"\");setUsers([]);// Verificar se temos um chat válido para edição\nif(type===\"edit\"){if(!chat){console.error(\"Chat não fornecido para edição\");setError(\"Não foi possível carregar os dados do chat\");return;}// Verificação mais robusta da estrutura do chat e seus usuários\nif(!chat.users){console.error(\"Usuários do chat não encontrados:\",chat);setError(\"Não foi possível carregar os usuários do chat\");return;}if(!Array.isArray(chat.users)){console.error(\"Propriedade users não é um array:\",chat);setError(\"Erro ao processar dados do chat\");return;}// Mapear usuários com verificação para cada item\ntry{const userList=chat.users.filter(u=>u&&u.user&&u.user.id&&u.user.name)// Garantir que cada item tem a estrutura esperada\n.map(u=>({id:u.user.id,name:u.user.name}));if(userList.length===0&&chat.users.length>0){// Se temos usuários mas nenhum válido após a filtragem\nconsole.error(\"Nenhum usuário válido encontrado no chat:\",chat.users);setError(\"Estrutura de usuários inválida\");return;}setUsers(userList);setTitle(chat.title||\"\");}catch(err){console.error(\"Erro ao processar usuários do chat:\",err);setError(\"Erro ao processar dados do chat\");}}},[chat,open,type]);const handleSave=async()=>{try{setLoading(true);setError(\"\");// Validações\nif(!title||title.trim()===\"\"){setError(\"O título é obrigatório\");setLoading(false);return;}if(!users||users.length===0){setError(\"Selecione pelo menos um usuário\");setLoading(false);return;}// Adicionar estado de loading no salvamento para evitar múltiplos cliques\nconst btnSave=document.querySelector('[data-btn-save=\"true\"]');if(btnSave)btnSave.disabled=true;if(type===\"edit\"){if(!chat||!chat.id){setError(\"Erro ao editar: dados do chat incompletos\");setLoading(false);return;}const{data}=await api.put(\"/chats/\".concat(chat.id),{users,title});// Após editar o chat, atualizar a interface\nif(data){handleUpdateChat(data);}}else{const{data}=await api.post(\"/chats\",{users,title});// Após criar o chat, notificar todos os participantes\nif(data){handleLoadNewChat(data);// Se o usuário não estiver na lista de participantes, adicione-o\nif(!users.find(u=>u.id===user.id)){users.push({id:user.id,name:user.name});}}}handleClose();}catch(err){var _err$response,_err$response$data;console.error(\"Erro ao salvar chat:\",err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||\"Ocorreu um erro ao salvar o chat. Tente novamente.\");}finally{// Restaurar o botão, independente do resultado\nconst btnSave=document.querySelector('[data-btn-save=\"true\"]');if(btnSave)btnSave.disabled=false;setLoading(false);}};return/*#__PURE__*/React.createElement(Dialog,{open:open,onClose:handleClose,\"aria-labelledby\":\"alert-dialog-title\",\"aria-describedby\":\"alert-dialog-description\"},/*#__PURE__*/React.createElement(DialogTitle,{id:\"alert-dialog-title\"},type===\"edit\"?\"Editar Conversa\":\"Nova Conversa\",error&&/*#__PURE__*/React.createElement(Typography,{color:\"error\",variant:\"caption\",style:{display:'block',marginTop:8}},error)),/*#__PURE__*/React.createElement(DialogContent,null,/*#__PURE__*/React.createElement(Grid,{spacing:2,container:true},/*#__PURE__*/React.createElement(Grid,{xs:12,style:{padding:18},item:true},/*#__PURE__*/React.createElement(TextField,{label:\"T\\xEDtulo\",placeholder:\"T\\xEDtulo\",value:title,onChange:e=>setTitle(e.target.value),variant:\"outlined\",size:\"small\",fullWidth:true,error:error.includes(\"título\")})),/*#__PURE__*/React.createElement(Grid,{xs:12,item:true},/*#__PURE__*/React.createElement(UsersFilter,{onFiltered:users=>setUsers(users),initialUsers:users})))),/*#__PURE__*/React.createElement(DialogActions,null,/*#__PURE__*/React.createElement(Button,{onClick:handleClose,color:\"primary\"},i18n.t(\"chatInternal.modal.cancel\")),/*#__PURE__*/React.createElement(Button,{onClick:handleSave,color:\"primary\",variant:\"contained\",\"data-btn-save\":\"true\",disabled:loading||users.length===0||!title||title===\"\"},loading?\"Salvando...\":i18n.t(\"chatInternal.modal.save\"))));}function Chat(props){const classes=useStyles();const{user,socket}=useContext(AuthContext);const history=useHistory();const[showDialog,setShowDialog]=useState(false);const[dialogType,setDialogType]=useState(\"new\");const[currentChat,setCurrentChat]=useState({});const[chats,setChats]=useState([]);const[chatsPageInfo,setChatsPageInfo]=useState({hasMore:false});const[messages,setMessages]=useState([]);const[messagesPageInfo,setMessagesPageInfo]=useState({hasMore:false});const[messagesPage,setMessagesPage]=useState(1);const[loading,setLoading]=useState(false);const[tab,setTab]=useState(0);const isMounted=useRef(true);const scrollToBottomRef=useRef();const{id}=useParams();useEffect(()=>{return()=>{isMounted.current=false;};},[]);useEffect(()=>{if(isMounted.current){findChats().then(data=>{const{records}=data;if(records.length>0){setChats(records);setChatsPageInfo(data);if(id&&records.length){const chat=records.find(r=>r.uuid===id);selectChat(chat);}}});}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);useEffect(()=>{if(isObject(currentChat)&&has(currentChat,\"id\")){findMessages(currentChat.id).then(()=>{if(typeof scrollToBottomRef.current===\"function\"){setTimeout(()=>{scrollToBottomRef.current();},300);}});}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[currentChat]);useEffect(()=>{const companyId=user.companyId;const onChatUser=data=>{if(data.action===\"create\"){// Adicionar o novo chat ao início da lista\nsetChats(prev=>[data.record,...prev]);}if(data.action===\"update\"){const changedChats=chats.map(chat=>{if(chat.id===data.record.id){// Atualizar também o chat atual se for o mesmo que está sendo editado\nif(currentChat.id===data.record.id){setCurrentChat(data.record);}return{...data.record};}return chat;});setChats(changedChats);}};const onChat=data=>{if(data.action===\"delete\"){const filteredChats=chats.filter(c=>c.id!==+data.id);setChats(filteredChats);// Verificar se o chat atual foi excluído\nif(currentChat&&currentChat.id===+data.id){setMessages([]);setMessagesPage(1);setMessagesPageInfo({hasMore:false});setCurrentChat({});// Adicionar um pequeno atraso antes do redirecionamento\n// para garantir que os estados sejam atualizados primeiro\nsetTimeout(()=>{history.push(\"/chats\");},100);}}// Adicionar tratamento para novas mensagens em qualquer chat\nif(data.action===\"new-message\"){// Atualizar a lista de chats com as informações atualizadas\nupdateChatWithNewMessage(data.chatId,data.newMessage,data.chat);}// Adicionar tratamento para atualizações de status em qualquer chat\nif(data.action===\"status-update\"){updateChatStatus(data.chatId,data.status);}};const onCurrentChat=data=>{if(data.action===\"new-message\"){// Atualizar mensagens apenas se for o chat atual\nif(currentChat&&currentChat.id===data.newMessage.chatId){setMessages(prev=>[...prev,data.newMessage]);scrollToBottomRef.current();}// Atualizar a lista de chats com as informações do novo chat\nupdateChatWithNewMessage(data.newMessage.chatId,data.newMessage,data.chat);}if(data.action===\"update\"){const changedChats=chats.map(chat=>{if(chat.id===data.chat.id){return{...data.chat};}return chat;});setChats(changedChats);scrollToBottomRef.current();}};// Função para atualizar o chat com nova mensagem\nconst updateChatWithNewMessage=(chatId,newMessage,updatedChat)=>{// Atualizar a lista de chats para mostrar a nova mensagem mesmo em chats inativos\nsetChats(prevChats=>{return prevChats.map(chat=>{if(chat.id===chatId){// Determinar se devemos incrementar as mensagens não lidas\nconst isCurrentChat=currentChat&&currentChat.id===chatId;const shouldIncrementUnreads=!isCurrentChat;// Se estamos no chat atual, marcar como lido automaticamente\nif(isCurrentChat){// Chamada assíncrona para marcar como lido no backend\nif(chat.unreads>0){markChatAsRead(chatId).catch(console.error);}}// Se temos o chat atualizado do servidor, usá-lo\nif(updatedChat){return{...updatedChat,lastMessage:newMessage.message||\"(Arquivo)\",lastMessageTime:newMessage.createdAt,// Incrementar contador de não lidos apenas se não for o chat atual\nunreads:shouldIncrementUnreads?(chat.unreads||0)+1:0};}else{// Caso contrário, atualizar apenas os campos necessários\nreturn{...chat,lastMessage:newMessage.message||\"(Arquivo)\",lastMessageTime:newMessage.createdAt,// Incrementar contador de não lidos apenas se não for o chat atual\nunreads:shouldIncrementUnreads?(chat.unreads||0)+1:0};}}return chat;});});};// Função para atualizar status de um chat\nconst updateChatStatus=(chatId,status)=>{setChats(prevChats=>{return prevChats.map(chat=>{if(chat.id===chatId){return{...chat,status:status};}return chat;});});};// Configurar ouvintes de socket\nsocket.on(\"company-\".concat(companyId,\"-chat-user-\").concat(user.id),onChatUser);socket.on(\"company-\".concat(companyId,\"-chat\"),onChat);// Ouvinte específico para o chat atual\nif(isObject(currentChat)&&has(currentChat,\"id\")){socket.on(\"company-\".concat(companyId,\"-chat-\").concat(currentChat.id),onCurrentChat);}// Adicionar ouvintes para todos os chats para receber atualizações em tempo real\nchats.forEach(chat=>{if(chat.id!==currentChat.id){socket.on(\"company-\".concat(companyId,\"-chat-\").concat(chat.id),data=>{// Precisamos tratar apenas atualizações de status e novas mensagens\nif(data.action===\"new-message\"){updateChatWithNewMessage(chat.id,data.newMessage,data.chat);}if(data.action===\"update\"){updateChatStatus(chat.id,data.status);}});}});return()=>{// Remover todos os ouvintes\nsocket.off(\"company-\".concat(companyId,\"-chat-user-\").concat(user.id),onChatUser);socket.off(\"company-\".concat(companyId,\"-chat\"),onChat);if(isObject(currentChat)&&has(currentChat,\"id\")){socket.off(\"company-\".concat(companyId,\"-chat-\").concat(currentChat.id),onCurrentChat);}// Remover ouvintes de todos os chats\nchats.forEach(chat=>{if(chat.id!==currentChat.id){socket.off(\"company-\".concat(companyId,\"-chat-\").concat(chat.id));}});};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[currentChat,chats]);const selectChat=chat=>{try{setMessages([]);setMessagesPage(1);setCurrentChat(chat);setTab(1);// Marcar mensagens como lidas explicitamente quando selecionar um chat\nif(chat&&chat.id){markChatAsRead(chat.id);// Atualizar contagem de mensagens não lidas localmente\nconst updatedChats=chats.map(c=>{if(c.id===chat.id){return{...c,unreads:0};}return c;});setChats(updatedChats);}}catch(err){console.error('Erro ao selecionar chat:',err);}};// Função para marcar chat como lido\nconst markChatAsRead=async chatId=>{try{await api.post(\"/chats/\".concat(chatId,\"/read\"),{userId:user.id});console.log(\"Chat \".concat(chatId,\" marcado como lido\"));}catch(err){console.error('Erro ao marcar chat como lido:',err);}};const sendMessage=async contentMessage=>{setLoading(true);try{await api.post(\"/chats/\".concat(currentChat.id,\"/messages\"),{message:contentMessage});}catch(err){}setLoading(false);};const deleteChat=async chat=>{try{await api.delete(\"/chats/\".concat(chat.id));// O socket se encarregará de atualizar a interface após a exclusão\n}catch(err){console.error(\"Erro ao excluir chat:\",err);alert(\"Não foi possível excluir o chat. Tente novamente.\");}};const updateChat=updatedChat=>{// Atualizar o chat localmente\nconst updatedChats=chats.map(chat=>{if(chat.id===updatedChat.id){return updatedChat;}return chat;});setChats(updatedChats);// Se o chat atualmente selecionado for o mesmo que está sendo editado, atualizá-lo\nif(currentChat.id===updatedChat.id){setCurrentChat(updatedChat);}};const findMessages=async chatId=>{setLoading(true);try{const{data}=await api.get(\"/chats/\".concat(chatId,\"/messages?pageNumber=\").concat(messagesPage));setMessagesPage(prev=>prev+1);setMessagesPageInfo(data);setMessages(prev=>[...data.records,...prev]);}catch(err){}setLoading(false);};const loadMoreMessages=async()=>{if(!loading){findMessages(currentChat.id);}};// Adicionar função para atualizar mensagens em tempo real\nconst handleMessagesUpdate=updatedMessages=>{setMessages(updatedMessages);};const findChats=async()=>{try{const{data}=await api.get(\"/chats\");return data;}catch(err){console.log(err);}};const renderGrid=()=>{return/*#__PURE__*/React.createElement(Grid,{className:classes.gridContainer,container:true},/*#__PURE__*/React.createElement(Grid,{className:classes.gridItem,md:3,item:true},/*#__PURE__*/React.createElement(\"div\",{className:classes.btnContainer},/*#__PURE__*/React.createElement(Button,{onClick:()=>{setDialogType(\"new\");setShowDialog(true);},color:\"primary\",variant:\"contained\"},i18n.t(\"chatInternal.new\"))),/*#__PURE__*/React.createElement(ChatList,{chats:chats,pageInfo:chatsPageInfo,loading:loading,handleSelectChat:chat=>selectChat(chat),handleDeleteChat:chat=>deleteChat(chat),handleEditChat:chat=>{// Verificar se o chat tem todas as informações necessárias\nconsole.log(\"Editando chat:\",chat);// Se não temos os usuários, precisamos carregar o chat completo\nif(!chat.users||chat.users.length===0){api.get(\"/chats/\".concat(chat.id)).then(response=>{const fullChat=response.data;console.log(\"Chat carregado com sucesso:\",fullChat);setCurrentChat(fullChat);setDialogType(\"edit\");setShowDialog(true);}).catch(error=>{console.error(\"Erro ao carregar chat para edição:\",error);alert(\"Não foi possível carregar o chat para edição. Tente novamente.\");});}else{// Se já temos todas as informações, podemos prosseguir\nsetCurrentChat(chat);setDialogType(\"edit\");setShowDialog(true);}}})),/*#__PURE__*/React.createElement(Grid,{className:classes.gridItem,md:9,item:true},isObject(currentChat)&&has(currentChat,\"id\")&&/*#__PURE__*/React.createElement(ChatMessages,{chat:currentChat,scrollToBottomRef:scrollToBottomRef,pageInfo:messagesPageInfo,messages:messages,loading:loading,handleSendMessage:sendMessage,handleLoadMore:loadMoreMessages,onMessagesUpdate:handleMessagesUpdate})));};const renderTab=()=>{return/*#__PURE__*/React.createElement(Grid,{className:classes.gridContainer,container:true},/*#__PURE__*/React.createElement(Grid,{md:12,item:true},/*#__PURE__*/React.createElement(Tabs,{value:tab,indicatorColor:\"primary\",textColor:\"primary\",onChange:(e,v)=>setTab(v),\"aria-label\":\"disabled tabs example\"},/*#__PURE__*/React.createElement(Tab,{label:\"Chats\"}),/*#__PURE__*/React.createElement(Tab,{label:\"Mensagens\"}))),tab===0&&/*#__PURE__*/React.createElement(Grid,{className:classes.gridItemTab,md:12,item:true},/*#__PURE__*/React.createElement(\"div\",{className:classes.btnContainer},/*#__PURE__*/React.createElement(Button,{onClick:()=>{setDialogType(\"new\");setShowDialog(true);},color:\"primary\",variant:\"contained\"},\"Novo\")),/*#__PURE__*/React.createElement(ChatList,{chats:chats,pageInfo:chatsPageInfo,loading:loading,handleSelectChat:chat=>selectChat(chat),handleDeleteChat:chat=>deleteChat(chat),handleEditChat:chat=>{// Verificar se o chat tem todas as informações necessárias\nconsole.log(\"Editando chat:\",chat);// Se não temos os usuários, precisamos carregar o chat completo\nif(!chat.users||chat.users.length===0){api.get(\"/chats/\".concat(chat.id)).then(response=>{const fullChat=response.data;console.log(\"Chat carregado com sucesso:\",fullChat);setCurrentChat(fullChat);setDialogType(\"edit\");setShowDialog(true);}).catch(error=>{console.error(\"Erro ao carregar chat para edição:\",error);alert(\"Não foi possível carregar o chat para edição. Tente novamente.\");});}else{// Se já temos todas as informações, podemos prosseguir\nsetCurrentChat(chat);setDialogType(\"edit\");setShowDialog(true);}}})),tab===1&&/*#__PURE__*/React.createElement(Grid,{className:classes.gridItemTab,md:12,item:true},isObject(currentChat)&&has(currentChat,\"id\")&&/*#__PURE__*/React.createElement(ChatMessages,{scrollToBottomRef:scrollToBottomRef,pageInfo:messagesPageInfo,messages:messages,loading:loading,handleSendMessage:sendMessage,handleLoadMore:loadMoreMessages,onMessagesUpdate:handleMessagesUpdate,chat:currentChat})));};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(ChatModal,{type:dialogType,open:showDialog,chat:currentChat,handleLoadNewChat:data=>{// Quando um novo chat é criado, atualize-o localmente e também adicione-o à lista de chats\nsetMessages([]);setMessagesPage(1);setCurrentChat(data);setTab(1);// Adicionar o novo chat ao início da lista\nsetChats(prev=>[data,...prev]);history.push(\"/chats/\".concat(data.uuid));},handleUpdateChat:data=>{// Quando um chat é editado, atualize-o localmente\nupdateChat(data);},handleClose:()=>setShowDialog(false)}),/*#__PURE__*/React.createElement(Paper,{className:classes.mainContainer},isWidthUp(\"md\",props.width)?renderGrid():renderTab()));}export default withWidth()(Chat);","map":null,"metadata":{},"sourceType":"module"}