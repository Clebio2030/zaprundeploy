{"ast":null,"code":"import React,{useState,useRef,useEffect}from\"react\";import{makeStyles}from\"@material-ui/core/styles\";import{IconButton,Typography,LinearProgress,Box,Snackbar}from\"@material-ui/core\";import PlayArrowIcon from\"@material-ui/icons/PlayArrow\";import PauseIcon from\"@material-ui/icons/Pause\";import AudiotrackIcon from\"@material-ui/icons/Audiotrack\";import{Howl,Howler}from'howler';const useStyles=makeStyles(theme=>({audioContainer:{display:\"flex\",flexDirection:\"column\",width:\"100%\",maxWidth:250,backgroundColor:\"transparent\",borderRadius:8,padding:theme.spacing(0.5),border:\"none\",overflow:\"hidden\"},playerControls:{display:\"flex\",alignItems:\"center\",backgroundColor:theme.palette.type===\"dark\"?\"rgba(60, 60, 60, 0.7)\":\"rgba(255, 255, 255, 0.7)\",borderRadius:24,padding:theme.spacing(0.5),boxShadow:\"0px 1px 3px rgba(0, 0, 0, 0.08)\"},playButton:{padding:6,color:theme.palette.primary.main},progressContainer:{display:\"flex\",flexDirection:\"column\",flex:1,marginLeft:theme.spacing(1),marginRight:theme.spacing(1)},progressBar:{height:4,borderRadius:2,marginBottom:4,backgroundColor:\"rgba(0, 0, 0, 0.1)\",\"& .MuiLinearProgress-bar\":{backgroundColor:theme.palette.primary.main}},timeInfo:{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\"},timeText:{fontSize:10,color:theme.palette.text.secondary,fontWeight:500},audioIcon:{fontSize:20,color:theme.palette.primary.main,marginRight:theme.spacing(1)}}));const formatTime=seconds=>{// Verificar se o valor é válido\nif(seconds===undefined||seconds===null||!isFinite(seconds)||isNaN(seconds)){return\"00:00\";}// Garantir que seja um número positivo\nconst safeSeconds=Math.max(0,Number(seconds));const mins=Math.floor(safeSeconds/60);const secs=Math.floor(safeSeconds%60);return\"\".concat(mins.toString().padStart(2,\"0\"),\":\").concat(secs.toString().padStart(2,\"0\"));};const getFullUrl=url=>{if(!url)return\"\";// Se a URL já começa com http ou https, retornar como está\nif(url.startsWith('http://')||url.startsWith('https://')){return url;}// Se a URL é relativa, adicionar o endereço do backend\nconst BACKEND_URL=process.env.REACT_APP_BACKEND_URL||window.location.origin;// Se começa com '/', removemos a barra para evitar duplicação\nconst cleanUrl=url.startsWith('/')?url.substring(1):url;// Verificar se já contém o prefixo public/ antes de adicioná-lo\nconst urlWithPublic=cleanUrl.startsWith('public/')?cleanUrl:\"public/\".concat(cleanUrl);const fullUrl=\"\".concat(BACKEND_URL,\"/\").concat(urlWithPublic);console.log('[DEBUG AUDIO URL]',{original:url,final:fullUrl});return fullUrl;};// Função para detectar iOS\nconst isIOS=()=>{const userAgent=navigator.userAgent||navigator.vendor||window.opera;return /iPad|iPhone|iPod/.test(userAgent)||navigator.platform==='MacIntel'&&navigator.maxTouchPoints>1;};// Função para obter a versão do iOS\nconst getIOSVersion=()=>{if(!isIOS())return 0;const match=navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);if(match){return parseFloat(\"\".concat(match[1],\".\").concat(match[2]));}return 0;};// Desbloquear áudio no iOS - método agressivo\nconst forceUnlockAudio=()=>{if(!isIOS())return;try{// 1. WebAudio API - método mais confiável\nconst AudioContext=window.AudioContext||window.webkitAudioContext;const audioContext=new AudioContext();// Criar oscilador e conectar\nconst oscillator=audioContext.createOscillator();const gainNode=audioContext.createGain();gainNode.gain.value=0.01;// Volume muito baixo, mas não zero\noscillator.connect(gainNode);gainNode.connect(audioContext.destination);// Iniciar e parar rapidamente\noscillator.start(0);oscillator.stop(0.1);// Forçar a retomada do contexto de áudio\nif(audioContext.state==='suspended'){audioContext.resume();}// 2. Reproduzir um arquivo de audio vazio\nconst silentAudio=new Audio('data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjI5LjEwMAAAAAAAAAAAAAAA//tAwAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAACAAABIADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDV1dXV1dXV1dXV1dXV1dXV1dXV1dXV1dXV6urq6urq6urq6urq6urq6urq6urq6urq6v////////////////////////////////8AAAAATGF2YzU4LjU0AAAAAAAAAAAAAAAAJAAAAAAAAAAAASAn4Wq1AAAAAAAAAAAAAAAAAAAAAP/7UMQAAAesTXWUEQBBiS7pyQiCI4OmIQgZBBDKCGMQcRwQQQQQQQQQQQQQQQQQQgQIECBBBBBAQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAgQIECBAiD/+1LEGIAEcAGPoIAAiO2YL/QQAARAgQIECBAgQIECBAgQIECBAgQ');silentAudio.load();silentAudio.loop=false;silentAudio.muted=false;silentAudio.volume=0.1;silentAudio.play().catch(()=>{});// 3. Forçar Howler a desbloquear\nif(Howler){Howler.autoUnlock=true;Howler.html5PoolSize=10;if(typeof Howler._unlockAudio==='function'){Howler._unlockAudio();}}// 4. Usando um clique simulado para trigger de áudio\nconst clickEvent=document.createEvent('MouseEvents');clickEvent.initEvent('click',true,true);document.body.dispatchEvent(clickEvent);}catch(e){console.error('Erro ao desbloquear áudio forçadamente:',e);}};// Método para criar e gerenciar manualmente a reprodução em ambiente iOS\nconst createIOSAudioPlayer=(url,_ref)=>{let{onPlay,onPause,onEnd,onTimeUpdate,onLoad,onError}=_ref;try{// Limpar qualquer instância Howler anterior para economia de memória\nHowler.unload();// Criar elemento de áudio nativo\nconst audioElement=new Audio();// Forçar configurações de baixo nível\naudioElement.autoplay=false;audioElement.preload='auto';audioElement.crossOrigin='anonymous';audioElement.volume=1.0;// Eventos do elemento de áudio\naudioElement.addEventListener('canplaythrough',()=>{if(onLoad)onLoad(audioElement.duration);});audioElement.addEventListener('loadedmetadata',()=>{if(onLoad)onLoad(audioElement.duration);});audioElement.addEventListener('error',e=>{console.error('Erro no elemento de áudio:',e);if(onError)onError(e);});audioElement.addEventListener('ended',()=>{if(onEnd)onEnd();});audioElement.addEventListener('timeupdate',()=>{if(onTimeUpdate)onTimeUpdate(audioElement.currentTime);});// Definir a URL do áudio\naudioElement.src=url;audioElement.load();// Funções para controlar o áudio\nconst play=()=>{// Tentar desbloquear o áudio antes de reproduzir\nforceUnlockAudio();// Atraso pequeno para garantir que o áudio seja desbloqueado\nsetTimeout(()=>{const playPromise=audioElement.play();if(playPromise){playPromise.then(()=>{if(onPlay)onPlay();}).catch(error=>{console.error('Erro ao reproduzir áudio:',error);// Tentar estratégia alternativa para iOS\nforceUnlockAudio();// Última tentativa - reproduzir com volume zero e depois aumentar\naudioElement.volume=0;setTimeout(()=>{const finalAttempt=audioElement.play();if(finalAttempt){finalAttempt.then(()=>{// Aumentar gradualmente o volume para evitar problemas\nconst volumeInterval=setInterval(()=>{if(audioElement.volume<1.0){audioElement.volume+=0.1;}else{clearInterval(volumeInterval);}},100);if(onPlay)onPlay();}).catch(finalError=>{console.error('Falha na última tentativa de reprodução:',finalError);if(onError)onError(finalError);});}},500);});}else{// Navegadores antigos que não suportam promises\nif(onPlay)onPlay();}},100);};const pause=()=>{audioElement.pause();if(onPause)onPause();};const stop=()=>{audioElement.pause();audioElement.currentTime=0;if(onPause)onPause();};const seek=time=>{audioElement.currentTime=time;};const setVolume=volume=>{audioElement.volume=volume;};const getCurrentTime=()=>{return audioElement.currentTime;};const getDuration=()=>{return audioElement.duration||0;};const isPlaying=()=>{return!audioElement.paused;};const cleanup=()=>{audioElement.pause();audioElement.src='';audioElement.load();};return{play,pause,stop,seek,setVolume,getCurrentTime,getDuration,isPlaying,cleanup};}catch(e){console.error('Erro ao criar player iOS:',e);return null;}};export default function ChatAudioPlayer(_ref2){let{audioUrl,duration,isRight}=_ref2;const classes=useStyles();const[isPlaying,setIsPlaying]=useState(false);const[currentTime,setCurrentTime]=useState(0);const[audioDuration,setAudioDuration]=useState(duration||0);const[metadataLoaded,setMetadataLoaded]=useState(false);const[loadingFailed,setLoadingFailed]=useState(false);const[showTryAgain,setShowTryAgain]=useState(false);const soundRef=useRef(null);const iosPlayerRef=useRef(null);const progressInterval=useRef(null);const loadAttempts=useRef(0);// Função para criar uma notificação para o usuário tentar novamente\nconst showTryAgainMessage=()=>{setShowTryAgain(true);setTimeout(()=>setShowTryAgain(false),3000);};// Validar duração para garantir valor numérico válido\nconst validateDuration=value=>{// Verificar se o valor é numérico e finito\nif(value===undefined||value===null||!isFinite(value)||isNaN(value)||value<=0){return 0;}return parseFloat(value);};// Desbloquear áudio ao montar o componente\nuseEffect(()=>{// Tentar desbloquear o áudio logo ao carregar o componente\nif(isIOS()){forceUnlockAudio();}return()=>{// Limpeza ao desmontar\nif(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}if(soundRef.current){soundRef.current.unload();soundRef.current=null;}if(iosPlayerRef.current){iosPlayerRef.current.cleanup();iosPlayerRef.current=null;}};},[]);// Sempre que a duração for definida diretamente via prop, considerar os metadados como carregados\nuseEffect(()=>{const validDuration=validateDuration(duration);if(validDuration>0){console.log(\"[DEBUG] Prop de dura\\xE7\\xE3o v\\xE1lida recebida: \".concat(validDuration,\"s\"));setAudioDuration(validDuration);setMetadataLoaded(true);}else if(audioDuration>0){// Se já temos uma duração válida no estado, considerar os metadados como carregados\nsetMetadataLoaded(true);}},[duration,audioDuration]);// Configurar o player de áudio quando a URL de áudio mudar\nuseEffect(()=>{// Limpar recursos anteriores\nif(soundRef.current){soundRef.current.unload();soundRef.current=null;}if(iosPlayerRef.current){iosPlayerRef.current.cleanup();iosPlayerRef.current=null;}if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}if(!audioUrl){setMetadataLoaded(true);return;}const fullUrl=getFullUrl(audioUrl);console.log('[DEBUG] Inicializando player de áudio com URL:',fullUrl);// Tratamento especial para iOS\nif(isIOS()){console.log('[INFO] Usando player especial para iOS');// Desbloquear o áudio do sistema\nforceUnlockAudio();// Criar player nativo para iOS\niosPlayerRef.current=createIOSAudioPlayer(fullUrl,{onLoad:audioDuration=>{console.log('[DEBUG] iOS player carregou áudio com duração:',audioDuration);const validDuration=validateDuration(audioDuration);setAudioDuration(validDuration||30);setMetadataLoaded(true);setLoadingFailed(false);},onPlay:()=>{console.log('[DEBUG] iOS player iniciou reprodução');},onPause:()=>{console.log('[DEBUG] iOS player pausou reprodução');},onEnd:()=>{console.log('[DEBUG] iOS player finalizou reprodução');setIsPlaying(false);setCurrentTime(0);if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}},onTimeUpdate:time=>{setCurrentTime(time);},onError:error=>{console.error('[ERROR] Erro no iOS player:',error);setLoadingFailed(true);setMetadataLoaded(true);showTryAgainMessage();}});// Se temos duração prévia, usar para mostrar mesmo que não consiga carregar metadata\nif(duration>0){setAudioDuration(duration);setMetadataLoaded(true);}}else{// Para outros navegadores, usar Howler normalmente\ntry{const howlerConfig={src:[fullUrl],html5:true,preload:true,format:['mp3','mpeg','opus','ogg','oga','wav','aac','caf','m4a','mp4','weba','webm','dolby','flac'],volume:1.0,onload:function(){console.log('[DEBUG] Howler carregado com sucesso. Duração:',this.duration());setMetadataLoaded(true);const validDuration=validateDuration(this.duration());setAudioDuration(validDuration||30);setLoadingFailed(false);},onloaderror:function(id,error){console.error('[ERROR] Erro ao carregar áudio via Howler:',error);loadAttempts.current+=1;if(loadAttempts.current>=3){setLoadingFailed(true);setMetadataLoaded(true);showTryAgainMessage();}else{// Tentar novamente com configuração HTML5 alternativa\nsoundRef.current.unload();soundRef.current=new Howl({...howlerConfig,html5:true});}},onplayerror:function(id,error){console.error('[ERROR] Erro ao reproduzir áudio via Howler:',error);setLoadingFailed(true);showTryAgainMessage();},onend:function(){console.log('[DEBUG] Reprodução finalizada');setIsPlaying(false);setCurrentTime(0);if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}}};soundRef.current=new Howl(howlerConfig);}catch(error){console.error('[ERROR] Exceção ao configurar Howler:',error);setLoadingFailed(true);setMetadataLoaded(true);showTryAgainMessage();}}},[audioUrl,duration]);const togglePlayback=()=>{// No iOS, usar o player nativo especial\nif(isIOS()&&iosPlayerRef.current){// Força desbloqueio do áudio antes da tentativa de reprodução\nforceUnlockAudio();if(isPlaying){// Se já está tocando, pausar\niosPlayerRef.current.pause();if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}}else{// Se está pausado, tocar\niosPlayerRef.current.play();// Atualizar o progresso\nif(!progressInterval.current){progressInterval.current=setInterval(()=>{if(iosPlayerRef.current&&iosPlayerRef.current.isPlaying()){setCurrentTime(iosPlayerRef.current.getCurrentTime());}},100);}}setIsPlaying(!isPlaying);return;}// Para outros navegadores, usar Howler\nif(!soundRef.current)return;if(isPlaying){// Se já está tocando, pausar\nsoundRef.current.pause();if(progressInterval.current){clearInterval(progressInterval.current);progressInterval.current=null;}}else{// Se está pausado, tocar\ntry{const playId=soundRef.current.play();// Atualizar o progresso de reprodução em intervalos regulares\nprogressInterval.current=setInterval(()=>{if(soundRef.current&&soundRef.current.playing()){setCurrentTime(soundRef.current.seek());}},100);}catch(e){console.error('[ERROR] Erro ao iniciar reprodução:',e);setLoadingFailed(true);showTryAgainMessage();return;// Não continuar se não conseguir reproduzir\n}}setIsPlaying(!isPlaying);};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Box,{className:classes.audioContainer,style:{alignSelf:isRight?\"flex-end\":\"flex-start\"}},/*#__PURE__*/React.createElement(\"div\",{className:classes.playerControls},/*#__PURE__*/React.createElement(IconButton,{className:classes.playButton,onClick:togglePlayback,disabled:loadingFailed,size:\"small\"},isPlaying?/*#__PURE__*/React.createElement(PauseIcon,{fontSize:\"small\"}):/*#__PURE__*/React.createElement(PlayArrowIcon,{fontSize:\"small\"})),/*#__PURE__*/React.createElement(\"div\",{className:classes.progressContainer},/*#__PURE__*/React.createElement(LinearProgress,{className:classes.progressBar,variant:\"determinate\",value:audioDuration>0?currentTime/audioDuration*100:0}),/*#__PURE__*/React.createElement(\"div\",{className:classes.timeInfo},/*#__PURE__*/React.createElement(Typography,{className:classes.timeText,variant:\"caption\"},formatTime(currentTime)),/*#__PURE__*/React.createElement(Typography,{className:classes.timeText,variant:\"caption\"},loadingFailed?\"Erro\":!metadataLoaded?\"Carregando...\":formatTime(audioDuration)))))),/*#__PURE__*/React.createElement(Snackbar,{open:showTryAgain,message:\"Tente novamente ou verifique o modo silencioso\",autoHideDuration:3000,onClose:()=>setShowTryAgain(false)}));}","map":null,"metadata":{},"sourceType":"module"}